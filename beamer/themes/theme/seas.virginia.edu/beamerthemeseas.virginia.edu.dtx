% \iffalse meta-comment
%
% Copyright (C) 2014 by Joel Coffman
% -----------------------------------
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.2
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%   http://www.latex-project.org/lppl.txt
%
% and version 1.2 or later is part of all distributions of LaTeX
% version 1999/12/01 or later.
%
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{beamerthemeseas.virginia.edu}
%<package>  [2016/10/06 v0.1.0 Beamer theme for the School of Engineering and Applied Science at the University of Virginia]
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{beamerarticle}

\input{.version}
\usepackage{beamerthemeseas.virginia.edu}

\usepackage{minted}

\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{beamerthemeseas.virginia.edu.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
% {Upper-case   \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
% Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
% Digits        \0\1\2\3\4\5\6\7\8\9
% Exclamation   \!     Double quote  \"     Hash (number) \#
% Dollar        \$     Percent       \%     Ampersand     \&
% Acute accent  \'     Left paren    \(     Right paren   \)
% Asterisk      \*     Plus          \+     Comma         \,
% Minus         \-     Point         \.     Solidus       \/
% Colon         \:     Semicolon     \;     Less than     \<
% Equals        \=     Greater than  \>     Question mark \?
% Commercial at \@     Left bracket  \[     Backslash     \\
% Right bracket \]     Circumflex    \^     Underscore    \_
% Grave accent  \`     Left brace    \{     Vertical bar  \|
% Right brace   \}     Tilde         \~}
%
%
% \changes{0.1.0}{2016/10/06}{%
%   Initial version
% }
%
% \GetFileInfo{beamerthemeseas.virginia.edu.sty}
%
% \DoNotIndex{\#,\$,\%,\&,\@,\\,\{,\},\^,\_,\~,\ }
% \DoNotIndex{\@ne}
% \DoNotIndex{\advance,\begingroup,\catcode,\closein}
% \DoNotIndex{\closeout,\day,\def,\edef,\else,\empty,\endgroup}
% \DoNotIndex{\global,\let,\relax}
%
% \title{
%   The \textsf{beamerthemeseas.virginia.edu} package\thanks{%
%     This document corresponds to \protect\textsf{beamerthemeseas.virginia.edu}~\fileversion-\version, dated \filedate.
%   }
% }
% \author{Joel Coffman\\\texttt{joel.coffman@jhu.edu}}
%
% \maketitle
%
% \begin{abstract}
% A Beamer theme for the School of Engineering and Applied Science at the University of Virginia.
% \end{abstract}
%
% \StopEventually{
%   \PrintChanges
%   \PrintIndex
% }
%
% \section{Usage}
% Per Beamer's documentation, this color theme should be loaded via the following command:
% \begin{VerbatimOut}[
%     gobble=1,
% ]{minted/usertheme.out}
% \usetheme{seas.virginia.edu}
% \end{VerbatimOut}
% \inputminted[
%     gobble=1,
% ]{latex}{minted/usertheme.out}
%
% \appendix
%
% \iffalse
%<*package>
% \fi
%
% \section{Implementation}
% See Beamer's documentation and the implementation of various themes for more information about the color palettes and color commands.
%
% \subsection{Required Packages}
% Use the \textsf{calc} package to compute the size of the logo.
%    \begin{macrocode}
\usepackage{calc}
%    \end{macrocode}
%
% Use predefined themes as basic style.
%    \begin{macrocode}
\usecolortheme{wahoo}
\useoutertheme[right]{logo}
%    \end{macrocode}
%
% \subsection{Configuration}
%
% \begin{macro}{logo}
% Use the university logo.
%    \begin{macrocode}
\logo{
  \includegraphics[
      height=\headheight - 2pt,
      keepaspectratio,
      width=0.4\paperwidth,
  ]{{seas.virginia.edu}.eps}
  \hspace{1pt}
}
%    \end{macrocode}
% \end{macro}
%
% \iffalse
%</package>
% \fi
%
% \Finale
%\iffalse
%<*seas-logo.eps>
%
%<<seas-logo.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Engineering 4-color.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1
%AI9_PrintingDataBegin
%%For: Anne Matthews
%%CreationDate: 2/5/08
%%BoundingBox: 0 0 289 127
%%HiResBoundingBox: 0 0 288.4659 126.2095
%%CropBox: 0 0 288.4659 126.2095
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="ï»¿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">02 Engineering final</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-02-05T15:13:52-05:00</xap:CreateDate>
         <xap:ModifyDate>2008-02-05T15:13:52-05:00</xap:ModifyDate>
         <xap:MetadataDate>2008-02-05T15:13:52-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>112</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAcAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwfzh+ZlnpEj2Omqt&#xA;3frtI5P7mM+Bp9pvYff2zS6/tiOI8MPVL7A7HS9nmfqltF5jqvm3zFqjk3l/KyH/AHSjenH/AMAl&#xA;Fzm82ty5fqkf0fJ3GPTY4cglOYremmmeafMGmOGsr+WNR/ussXjPzRqr+GZOHV5cf0yI/Hc05NPC&#xA;fMPS/KH5o2uoyR2OrqtreOQsc67RSHsDX7DH7s6LQ9sjIRHJtLv6fsdRquzzH1Q3DPc3rrGO+cfI&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:330A9433D58F11DCA05880145D564D00</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:330A9434D58F11DCA05880145D564D00</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:d8594aea-d422-11dc-a7c1-000d933e3dc4</stRef:instanceID>
            <stRef:documentID>uuid:238B62C0D58B11DCA05880145D564D00</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -126.209 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 126.209 li
288.466 126.209 li
288.466 0 li
cp
clp
[1 0 0 1 0 0 ] concat
43.8184 55.3594 mo
43.8184 29.5342 li
49.2397 29.5342 li
49.2397 55.3594 li
43.8184 55.3594 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.15 0.5 1 0 cmyk
f
14.5361 55.3594 mo
14.5361 29.5342 li
19.7871 29.5342 li
19.7871 55.3594 li
14.5361 55.3594 li
cp
f
21.5933 55.3594 mo
21.5933 29.5342 li
27.1919 29.5342 li
27.1919 55.3594 li
21.5933 55.3594 li
cp
f
29.0024 55.3594 mo
29.0024 29.5342 li
34.6011 29.5342 li
34.6011 55.3594 li
29.0024 55.3594 li
cp
f
42.0083 29.5342 mo
42.0083 55.3594 li
36.4077 55.3594 li
36.4077 29.5342 li
42.0083 29.5342 li
cp
f
46.9077 27.7109 mo
16.7466 27.7109 li
32.2305 18.1855 li
46.9077 27.7109 li
cp
f
13.2749 27.7109 mo
0.351074 27.7109 li
0.351074 18.0879 li
28.9155 18.0879 li
13.2749 27.7109 li
cp
f
35.4224 18.0879 mo
63.2529 18.0879 li
63.2529 27.7109 li
50.2549 27.7109 li
35.4224 18.0879 li
cp
f
59.269 16.2617 mo
4.33398 16.2617 li
9.71484 6.55957 19.9976 0 31.8008 0 cv
43.6035 0 53.8877 6.55957 59.269 16.2617 cv
cp
f
0.351074 33.9941 mo
0.351074 32.4961 li
0.713867 32.7578 li
0.45166 33.5625 li
0.351074 33.9941 li
cp
11.0552 55.3594 mo
8.62158 55.3594 li
9.83838 54.4775 li
11.0552 55.3594 li
cp
12.729 55.3594 mo
11.0664 55.3594 li
10.5981 53.9238 li
11.8301 53.0303 li
10.3091 53.0303 li
9.83838 51.582 li
9.36914 53.0303 li
7.84814 53.0303 li
9.07959 53.9238 li
8.61133 55.3594 li
0.351074 55.3594 li
0.347168 39.7891 li
0.351074 34.1738 li
1.50781 33.3359 li
2.73633 34.2295 li
2.2666 32.7832 li
3.49512 31.8877 li
1.97412 31.8877 li
1.50781 30.4434 li
1.2915 31.1016 li
0.996582 31.8877 li
0.351074 31.8877 li
0.351074 29.5342 li
12.729 29.5342 li
12.729 55.3594 li
cp
0.347168 39.7891 mo
1.57715 40.6836 li
1.10742 42.1289 li
2.33496 41.2354 li
3.56641 42.1289 li
3.09668 40.6836 li
4.32715 39.7891 li
2.80713 39.7891 li
2.33496 38.3418 li
1.86475 39.7891 li
0.347168 39.7891 li
cp
4.58203 48.002 mo
4.11084 49.4463 li
5.34082 48.5527 li
6.57129 49.4463 li
6.10107 48.002 li
7.33105 47.1055 li
5.81152 47.1055 li
5.34082 45.6582 li
4.87158 47.1055 li
3.35059 47.1055 li
4.58203 48.002 li
cp
ef
12.729 57.1855 mo
12.729 64.041 li
0.351074 64.041 li
0.351074 57.1855 li
12.729 57.1855 li
cp
ef
51.0469 57.1855 mo
63.2529 57.1855 li
63.2529 64.041 li
51.0469 64.041 li
51.0469 57.1855 li
cp
ef
32.5527 64.041 mo
31.1606 64.041 li
31.8525 63.5391 li
32.5527 64.041 li
cp
23.1816 62.0273 mo
22.71 63.4727 li
23.9404 62.5781 li
25.1699 63.4727 li
24.7031 62.0273 li
25.9307 61.1309 li
24.4097 61.1309 li
23.9404 59.6855 li
23.4697 61.1309 li
21.9482 61.1309 li
23.1816 62.0273 li
cp
31.0962 62.9854 mo
30.751 64.041 li
14.5361 64.041 li
14.5361 57.1855 li
16.5371 57.1855 li
16.1875 58.2578 li
14.666 58.2578 li
15.8999 59.1533 li
15.4263 60.5986 li
16.6582 59.7031 li
17.8862 60.5986 li
17.418 59.1533 li
18.6479 58.2578 li
17.1255 58.2578 li
16.7773 57.1855 li
46.9077 57.1855 li
46.5615 58.2578 li
45.0381 58.2578 li
46.2705 59.1533 li
45.8003 60.5986 li
47.0313 59.7031 li
48.2617 60.5986 li
47.7886 59.1533 li
49.02 58.2578 li
47.5005 58.2578 li
47.1523 57.1855 li
49.2397 57.1855 li
49.2397 64.041 li
32.9556 64.041 li
32.6133 62.9854 li
33.8428 62.0928 li
32.3228 62.0928 li
31.8525 60.6465 li
31.3818 62.0928 li
29.8604 62.0928 li
31.0962 62.9854 li
cp
40.2861 62.0273 mo
41.5171 61.1309 li
39.9971 61.1309 li
39.5283 59.6855 li
39.0576 61.1309 li
37.5376 61.1309 li
38.7681 62.0273 li
38.2959 63.4727 li
39.5283 62.5781 li
40.7578 63.4727 li
40.2861 62.0273 li
cp
ef
63.2529 32.5576 mo
63.2529 33.7383 li
62.9404 32.7832 li
63.2529 32.5576 li
cp
63.2529 55.3594 mo
55.0757 55.3594 li
52.6313 55.3594 li
51.0469 55.3594 li
51.0469 29.5342 li
63.2529 29.5342 li
63.2529 31.8877 li
62.6543 31.8877 li
62.1816 30.4434 li
61.7139 31.8877 li
60.1919 31.8877 li
61.4209 32.7832 li
60.9517 34.2295 li
62.1816 33.3359 li
63.2529 34.1113 li
63.2529 39.7891 li
61.8228 39.7891 li
61.3501 38.3418 li
60.8804 39.7891 li
59.3623 39.7891 li
60.5908 40.6836 li
60.1221 42.1289 li
61.3501 41.2354 li
62.583 42.1289 li
62.1089 40.6836 li
63.2529 39.8535 li
63.2529 55.3594 li
cp
55.0757 55.3594 mo
54.606 53.9238 li
55.8413 53.0303 li
54.3193 53.0303 li
53.8477 51.582 li
53.3789 53.0303 li
51.8589 53.0303 li
53.0884 53.9238 li
52.6221 55.3594 li
53.8477 54.4775 li
55.0669 55.3594 li
55.0757 55.3594 li
cp
59.1045 48.002 mo
60.3389 47.1055 li
58.8164 47.1055 li
58.3462 45.6582 li
57.876 47.1055 li
56.3555 47.1055 li
57.5845 48.002 li
57.1143 49.4463 li
58.3462 48.5527 li
59.5762 49.4463 li
59.1045 48.002 li
cp
ef
85.8359 36.1572 mo
90.1279 36.1572 93.1353 35.0244 95.1055 33.1973 cv
97.8662 30.832 98.9521 27.7266 99.2485 23.6816 cv
99.3965 21.7588 99.4951 13.1309 99.4951 12.4414 cv
99.4951 11.752 99.4951 4.75098 99.5942 4.25781 cv
99.7412 3.66406 99.8887 2.28418 101.713 2.28418 cv
103.735 2.28418 li
103.981 2.28418 104.031 2.08789 104.031 1.79199 cv
104.031 0.707031 li
104.031 0.558594 103.981 0.362305 103.538 0.362305 cv
103.094 0.362305 101.516 0.509766 98.1147 0.509766 cv
94.811 0.509766 92.543 0.362305 92.0518 0.362305 cv
91.7529 0.362305 91.7036 0.460938 91.7036 0.707031 cv
91.7036 1.89063 li
91.7036 2.13477 91.7529 2.28418 92.0518 2.28418 cv
94.2178 2.28418 li
95.5015 2.28418 96.2896 3.16992 96.437 4.4541 cv
96.5859 5.68555 96.6865 8.54688 96.6865 12.2939 cv
96.6865 22.8447 li
96.6865 26.4941 96.0425 29.4531 94.1201 31.5225 cv
92.3945 33.2969 89.5342 34.2334 86.7251 34.2334 cv
83.8652 34.2334 80.7095 33.3467 78.8857 30.6836 cv
77.751 29.0088 77.3574 26.6914 77.3052 24.4229 cv
77.2583 22.8447 77.0605 16.584 77.0605 13.9697 cv
77.0605 10.7148 li
77.0605 8.2002 77.1099 4.75098 77.1592 4.30664 cv
77.2583 3.2207 78.0957 2.28418 79.5254 2.28418 cv
81.9917 2.28418 li
82.3374 2.28418 82.3853 2.1875 82.3853 1.93848 cv
82.3853 0.65625 li
82.3853 0.460938 82.3374 0.362305 81.9419 0.362305 cv
81.3994 0.362305 79.0317 0.509766 75.1865 0.509766 cv
71.3418 0.509766 68.9258 0.362305 68.4321 0.362305 cv
68.0371 0.362305 67.9907 0.460938 67.9907 0.755859 cv
67.9907 1.83984 li
67.9907 2.1875 68.0371 2.28418 68.3325 2.28418 cv
70.6504 2.28418 li
72.1782 2.28418 72.5254 3.07227 72.5254 4.79883 cv
72.5254 16.5332 li
72.5254 22.9932 72.7217 26.2959 73.3145 28.5146 cv
74.1025 31.6211 75.8271 33.791 79.1812 35.1211 cv
80.8086 35.8135 83.2739 36.1572 85.8359 36.1572 cv
cp
0.9 0.5 0.05 0.3 cmyk
ef
125.268 19.1582 mo
125.268 16.9609 125.16 13.5869 125.429 11.1211 cv
125.534 10.3711 125.803 9.99512 127.144 9.99512 cv
127.678 9.99512 li
127.892 9.99512 127.999 9.83496 127.999 9.62109 cv
127.999 8.49512 li
127.999 8.17383 127.892 8.06836 127.625 8.06836 cv
127.251 8.06836 125.374 8.23047 124.248 8.23047 cv
122.536 8.23047 120.233 8.06836 119.857 8.06836 cv
119.59 8.06836 119.483 8.17383 119.483 8.33691 cv
119.483 9.62109 li
119.483 9.89063 119.59 9.99512 119.857 9.99512 cv
120.766 9.99512 li
121.678 9.99512 122.482 10.3184 122.748 10.9609 cv
123.018 11.6035 123.177 14.7109 123.177 15.9971 cv
123.286 17.7109 123.34 19.3721 123.34 22.4248 cv
123.34 25.959 li
123.125 25.959 li
122.482 25.2637 117.5 18.9961 116.536 17.8711 cv
115.41 16.5322 109.25 8.76563 109.088 8.55176 cv
108.875 8.23047 108.554 8.12109 107.805 8.12109 cv
107.16 8.12109 106.035 8.23047 105.179 8.23047 cv
104.588 8.23047 103.731 8.17383 103.037 8.12109 cv
102.339 8.12109 101.75 8.06836 101.644 8.06836 cv
101.428 8.06836 101.322 8.23047 101.322 8.39063 cv
101.322 9.67578 li
101.322 9.89063 101.428 9.99512 101.644 9.99512 cv
102.126 9.99512 li
103.627 9.99512 104.965 10.9082 104.965 12.8359 cv
104.965 18.4609 li
104.965 24.5146 104.856 28.3174 104.802 28.96 cv
104.643 30.1914 103.784 30.5684 103.249 30.5684 cv
102.017 30.5684 li
101.856 30.5684 101.803 30.6211 101.803 30.7285 cv
101.803 32.1211 li
101.803 32.3887 101.856 32.4961 101.965 32.4961 cv
102.394 32.4961 104.802 32.3359 105.554 32.3359 cv
107.107 32.3359 109.25 32.4961 109.625 32.4961 cv
109.892 32.4961 109.892 32.3887 109.892 32.1738 cv
109.892 30.8887 li
109.892 30.6748 109.892 30.5684 109.625 30.5684 cv
108.5 30.5684 li
107.965 30.5684 107.376 29.9775 107.213 28.7461 cv
107.107 28.2656 106.894 22.9072 106.894 19.6934 cv
106.894 12.3535 li
107 12.3535 li
107.858 13.3174 112.195 19.1035 113.48 20.6035 cv
114.072 21.2988 116.374 24.0332 118.838 26.9766 cv
121.036 29.6016 122.856 31.7979 123.23 32.1738 cv
123.446 32.3359 123.98 32.709 124.463 32.709 cv
125.106 32.709 125.268 32.1738 125.268 31.6914 cv
125.268 19.1582 li
cp
ef
136.934 18.6221 mo
136.934 18.2451 136.988 11.8711 136.988 11.334 cv
137.041 10.2109 137.523 9.99512 138.971 9.99512 cv
139.88 9.99512 li
140.149 9.99512 140.2 9.83496 140.2 9.62109 cv
140.2 8.33691 li
140.2 8.17383 140.097 8.06836 139.88 8.06836 cv
139.452 8.06836 136.722 8.23047 135.167 8.23047 cv
132.648 8.28125 129.329 8.06836 129.007 8.06836 cv
128.792 8.06836 128.685 8.17383 128.685 8.39063 cv
128.685 9.62109 li
128.685 9.83496 128.737 9.99512 129.007 9.99512 cv
129.97 9.99512 li
132.223 9.99512 132.703 10.5313 132.703 11.1211 cv
132.703 11.8711 132.81 17.2266 132.81 18.084 cv
132.81 20.4434 li
132.81 22.2637 132.756 29.0684 132.703 29.5488 cv
132.593 30.5137 131.74 30.5684 130.399 30.5684 cv
129.222 30.5684 li
129.007 30.5684 128.901 30.7285 128.901 30.8887 cv
128.901 32.0674 li
128.901 32.3359 129.007 32.4961 129.222 32.4961 cv
129.541 32.4961 132.648 32.3359 134.471 32.3359 cv
136.879 32.3359 139.669 32.4961 140.097 32.4961 cv
140.365 32.4961 140.417 32.3359 140.417 32.1211 cv
140.417 30.8359 li
140.417 30.6748 140.365 30.5684 140.097 30.5684 cv
139.293 30.5684 li
137.738 30.5684 137.095 29.8174 136.988 28.5859 cv
136.934 27.7803 136.934 21.6221 136.934 21.2988 cv
136.934 18.6221 li
cp
ef
194.528 10.9609 mo
194.528 9.99512 195.333 9.7832 196.138 9.7832 cv
198.278 9.7832 199.781 10.2656 201.229 11.1738 cv
202.189 11.8174 202.993 13.2637 202.993 14.8711 cv
202.993 16.2656 202.08 20.4434 196.138 20.4434 cv
195.44 20.4434 194.903 20.3887 194.528 20.3359 cv
194.528 10.9609 li
cp
190.458 20.123 mo
190.402 23.3896 190.458 26.5488 190.402 29.1748 cv
190.402 30.3535 189.763 30.5684 188.477 30.5684 cv
187.833 30.5684 li
187.62 30.5684 187.512 30.6748 187.512 30.8359 cv
187.512 32.0674 li
187.512 32.3359 187.62 32.4961 187.833 32.4961 cv
188.208 32.4961 190.939 32.3359 192.28 32.3359 cv
194.048 32.3359 196.941 32.4961 197.317 32.4961 cv
197.638 32.4961 197.745 32.3887 197.745 32.1211 cv
197.745 30.8359 li
197.745 30.6748 197.638 30.5684 197.423 30.5684 cv
196.03 30.5684 li
194.958 30.5684 194.639 29.9775 194.528 29.2285 cv
194.528 23.4434 li
194.528 22.1572 li
194.903 22.0488 195.388 22.0488 195.921 22.0488 cv
198.174 22.0488 198.976 23.2285 200.905 26.5488 cv
201.384 27.3535 203.743 31.6914 204.763 32.4424 cv
205.671 32.3887 206.958 32.3359 208.19 32.3359 cv
208.724 32.3359 209.369 32.3887 209.851 32.3887 cv
210.386 32.4424 210.815 32.4961 210.922 32.4961 cv
211.136 32.4961 211.243 32.3359 211.243 32.1211 cv
211.243 31.0498 li
211.243 30.7285 211.19 30.5684 210.977 30.5684 cv
210.009 30.5684 209.315 30.5137 208.564 29.9775 cv
207.549 29.2285 206.317 27.6211 205.561 26.5488 cv
203.368 23.4434 202.296 21.7822 201.064 21.5146 cv
201.064 21.4072 li
205.296 19.9082 207.387 17.7637 207.387 14.0674 cv
207.387 12.8359 206.692 11.2832 205.511 10.1582 cv
204.173 8.97852 201.76 8.06836 198.549 8.06836 cv
197.85 8.06836 193.19 8.23047 192.546 8.23047 cv
191.584 8.23047 188.262 8.06836 187.995 8.06836 cv
187.78 8.06836 187.675 8.17383 187.675 8.33691 cv
187.675 9.62109 li
187.675 9.83496 187.728 9.99512 187.886 9.99512 cv
188.424 9.99512 li
189.924 9.99512 190.402 10.5859 190.458 11.6563 cv
190.458 16.8008 li
190.458 20.123 li
cp
ef
219.685 32.9766 mo
224.558 32.9766 227.132 29.5488 227.132 25.5322 cv
227.132 22.8535 226.489 21.5146 225.413 20.3887 cv
224.077 18.9961 222.095 18.4063 219.63 17.4961 cv
218.614 17.1201 216.685 16.3184 215.883 15.3008 cv
215.29 14.6035 215.024 13.4795 215.024 12.6748 cv
215.024 11.71 215.883 9.4082 218.826 9.4082 cv
220.38 9.4082 221.559 9.94336 222.364 10.8545 cv
223.487 12.1396 223.915 14.0137 224.236 14.6563 cv
224.29 14.8184 224.397 14.9248 224.558 14.8711 cv
225.522 14.6563 li
225.683 14.6035 225.735 14.4961 225.735 14.3359 cv
225.683 13.5869 225.202 10.1025 225.202 8.33691 cv
225.202 8.06836 225.147 7.85449 224.72 7.85449 cv
224.29 7.85449 224.128 7.85449 224.024 8.01563 cv
223.809 8.39063 li
223.703 8.65723 223.437 8.60449 222.896 8.28125 cv
222.257 7.96094 221.131 7.58594 219.094 7.58594 cv
217.169 7.58594 215.452 8.06836 214.058 9.19141 cv
212.882 10.2109 211.757 11.8711 211.757 13.6953 cv
211.757 16.3184 212.398 18.0332 213.629 19.209 cv
215.235 20.6582 217.806 21.6221 218.88 21.9941 cv
221.72 23.0674 223.809 24.4063 223.809 27.459 cv
223.809 29.7637 221.237 31.1016 219.522 31.1016 cv
217.54 31.1016 215.774 30.0313 214.97 28.4248 cv
214.005 26.6563 214.005 25.5322 214.005 24.7832 cv
214.005 24.5674 213.79 24.459 213.578 24.4063 cv
212.614 24.2988 li
212.398 24.2988 212.29 24.459 212.235 24.6758 cv
212.185 25.5322 211.81 29.8174 211.649 31.3164 cv
211.596 31.5869 211.757 31.7979 212.074 31.9063 cv
212.505 32.0146 212.773 31.9063 212.882 31.6387 cv
213.042 31.2109 li
213.15 30.7813 213.47 30.8359 213.845 31.1016 cv
215.077 32.0674 216.952 32.9766 219.685 32.9766 cv
cp
ef
236.204 18.6221 mo
236.204 18.2451 236.259 11.8711 236.259 11.334 cv
236.313 10.2109 236.798 9.99512 238.241 9.99512 cv
239.149 9.99512 li
239.421 9.99512 239.476 9.83496 239.476 9.62109 cv
239.476 8.33691 li
239.476 8.17383 239.366 8.06836 239.149 8.06836 cv
238.724 8.06836 235.989 8.23047 234.437 8.23047 cv
231.921 8.28125 228.595 8.06836 228.278 8.06836 cv
228.063 8.06836 227.955 8.17383 227.955 8.39063 cv
227.955 9.62109 li
227.955 9.83496 228.008 9.99512 228.278 9.99512 cv
229.24 9.99512 li
231.491 9.99512 231.973 10.5313 231.973 11.1211 cv
231.973 11.8711 232.083 17.2266 232.083 18.084 cv
232.083 20.4434 li
232.083 22.2637 232.026 29.0684 231.973 29.5488 cv
231.865 30.5137 231.009 30.5684 229.67 30.5684 cv
228.489 30.5684 li
228.278 30.5684 228.169 30.7285 228.169 30.8887 cv
228.169 32.0674 li
228.169 32.3359 228.278 32.4961 228.489 32.4961 cv
228.812 32.4961 231.921 32.3359 233.743 32.3359 cv
236.149 32.3359 238.938 32.4961 239.366 32.4961 cv
239.632 32.4961 239.688 32.3359 239.688 32.1211 cv
239.688 30.8359 li
239.688 30.6748 239.632 30.5684 239.366 30.5684 cv
238.563 30.5684 li
237.009 30.5684 236.366 29.8174 236.259 28.5859 cv
236.204 27.7803 236.204 21.6221 236.204 21.2988 cv
236.204 18.6221 li
cp
ef
94.5352 47.8779 mo
93.7236 47.8779 92.9761 47.2344 92.9761 46.1484 cv
92.9761 44.5566 93.793 42.4863 94.9434 40.6543 cv
96.6367 37.9082 98.4336 36.623 99.8579 36.623 cv
100.976 36.623 101.586 37.4707 101.554 38.5215 cv
101.554 40.7598 98.0605 47.8779 94.5352 47.8779 cv
cp
95.0425 49.5049 mo
99.96 49.5049 102.911 42.7598 102.911 39.0283 cv
102.911 36.7227 101.554 35.0625 99.2817 35.0625 cv
94.7744 35.0625 91.5527 40.8594 91.5527 45.1318 cv
91.5527 47.709 93.1802 49.5049 95.0425 49.5049 cv
cp
ef
149.84 50.3633 mo
149.84 49.9912 149.892 43.6152 149.892 43.0781 cv
149.946 41.9551 150.426 41.7412 151.871 41.7412 cv
152.783 41.7412 li
153.05 41.7412 153.104 41.5801 153.104 41.3652 cv
153.104 40.0801 li
153.104 39.9199 152.995 39.8125 152.783 39.8125 cv
152.354 39.8125 149.624 39.9727 148.069 39.9727 cv
145.55 40.0254 142.231 39.8125 141.911 39.8125 cv
141.698 39.8125 141.587 39.9199 141.587 40.1328 cv
141.587 41.3652 li
141.587 41.5801 141.642 41.7412 141.911 41.7412 cv
142.874 41.7412 li
145.125 41.7412 145.604 42.2764 145.604 42.8672 cv
145.604 43.6152 145.71 48.9707 145.71 49.8291 cv
145.71 52.1855 li
145.71 54.0068 145.659 60.8096 145.604 61.2949 cv
145.5 62.2559 144.641 62.3125 143.3 62.3125 cv
142.122 62.3125 li
141.911 62.3125 141.806 62.4707 141.806 62.6328 cv
141.806 63.8105 li
141.806 64.0781 141.911 64.2383 142.122 64.2383 cv
142.446 64.2383 145.55 64.0781 147.372 64.0781 cv
149.784 64.0781 152.567 64.2383 152.995 64.2383 cv
153.267 64.2383 153.321 64.0781 153.321 63.8633 cv
153.321 62.5801 li
153.321 62.418 153.267 62.3125 152.995 62.3125 cv
152.193 62.3125 li
150.644 62.3125 149.997 61.5625 149.892 60.3301 cv
149.84 59.5234 149.84 53.3652 149.84 53.0439 cv
149.84 50.3633 li
cp
ef
162.349 42.707 mo
162.349 41.7412 163.151 41.5234 163.952 41.5234 cv
166.099 41.5234 167.599 42.0078 169.045 42.918 cv
170.009 43.5625 170.812 45.0088 170.812 46.6133 cv
170.812 48.0078 169.901 52.1855 163.952 52.1855 cv
163.257 52.1855 162.723 52.1328 162.349 52.0801 cv
162.349 42.707 li
cp
157.97 51.8662 mo
157.915 55.1348 157.97 58.2939 157.915 60.9199 cv
157.915 62.0977 157.271 62.3125 155.989 62.3125 cv
155.343 62.3125 li
155.13 62.3125 155.022 62.418 155.022 62.5801 cv
155.022 63.8105 li
155.022 64.0781 155.13 64.2383 155.343 64.2383 cv
155.718 64.2383 158.45 64.0781 159.791 64.0781 cv
161.556 64.0781 164.449 64.2383 164.825 64.2383 cv
165.147 64.2383 165.255 64.1318 165.255 63.8633 cv
165.255 62.5801 li
165.255 62.418 165.147 62.3125 164.934 62.3125 cv
163.539 62.3125 li
162.47 62.3125 162.147 61.7227 162.04 60.9727 cv
162.04 55.1875 li
162.04 53.9014 li
162.415 53.793 162.897 53.793 163.433 53.793 cv
165.683 53.793 166.487 54.9736 168.415 58.2939 cv
168.896 59.0957 171.252 63.4365 172.274 64.1855 cv
173.182 64.1318 174.469 64.0781 175.701 64.0781 cv
176.237 64.0781 176.878 64.1318 177.357 64.1318 cv
177.896 64.1855 178.325 64.2383 178.433 64.2383 cv
178.645 64.2383 178.755 64.0781 178.755 63.8633 cv
178.755 62.793 li
178.755 62.4707 178.7 62.3125 178.485 62.3125 cv
177.521 62.3125 176.825 62.2559 176.076 61.7227 cv
175.055 60.9727 173.825 59.3652 173.075 58.2939 cv
170.878 55.1875 169.807 53.5244 168.574 53.2578 cv
168.574 53.1514 li
172.808 51.6504 174.896 49.5078 174.896 45.8105 cv
174.896 44.5801 174.2 43.0254 173.022 41.9023 cv
171.683 40.7217 169.272 39.8125 166.057 39.8125 cv
165.361 39.8125 160.698 39.9727 160.058 39.9727 cv
159.097 39.9727 155.772 39.8125 155.505 39.8125 cv
155.294 39.8125 155.185 39.9199 155.185 40.0801 cv
155.185 41.3652 li
155.185 41.5801 155.235 41.7412 155.396 41.7412 cv
155.933 41.7412 li
157.434 41.7412 157.915 42.3291 157.97 43.4004 cv
157.97 48.5439 li
157.97 51.8662 li
cp
ef
198.183 56.793 mo
198.183 55.8838 199.2 55.668 199.734 55.668 cv
200.649 55.668 li
200.808 55.668 200.914 55.5059 200.914 55.3477 cv
200.914 54.0605 li
200.914 53.9014 200.808 53.793 200.591 53.793 cv
200.378 53.793 197.97 53.9014 195.987 53.9014 cv
193.093 53.9014 190.468 53.793 190.149 53.793 cv
189.931 53.793 189.881 53.9014 189.881 54.0605 cv
189.881 55.3477 li
189.881 55.5059 189.931 55.6152 190.149 55.6152 cv
191.431 55.6152 li
192.826 55.6152 194.058 55.9902 194.058 57.2227 cv
194.058 59.2031 li
194.058 60.2773 193.951 60.9727 193.257 61.5059 cv
192.396 62.2031 190.686 62.6836 188.807 62.6836 cv
187.31 62.6836 185.167 61.8818 183.665 60.2773 cv
181.577 58.0791 180.398 55.0244 180.398 50.9004 cv
180.398 48.4902 181.577 45.6504 183.185 43.8828 cv
185.167 41.7412 187.253 41.1504 188.915 41.1504 cv
191.378 41.1504 192.879 42.2227 194.326 43.7246 cv
195.612 45.0088 196.521 46.668 196.896 47.5254 cv
197.058 47.9531 197.165 48.0078 197.322 47.9531 cv
198.345 47.6328 li
198.503 47.5801 198.556 47.4717 198.556 47.2041 cv
198.452 46.2412 197.755 41.2578 197.755 40.9912 cv
197.755 40.6152 197.646 40.4023 197.165 40.4023 cv
196.735 40.4023 196.575 40.5605 196.469 40.7764 cv
196.2 41.2578 li
196.094 41.4199 195.878 41.4199 195.45 41.043 cv
194.435 40.2949 191.914 39.3301 189.345 39.3301 cv
185.541 39.3301 182.273 40.4541 179.753 42.5977 cv
177.184 44.8477 175.792 48.1143 175.792 51.3848 cv
175.792 55.5635 176.862 58.4531 179.006 60.8096 cv
181.523 63.5957 185.808 64.7217 188.593 64.7217 cv
192.022 64.7217 194.913 63.9736 197.755 62.5801 cv
198.128 62.418 198.345 62.2559 198.345 61.9902 cv
198.345 61.7227 198.183 61.4004 198.183 60.9199 cv
198.183 56.793 li
cp
ef
208.636 50.3633 mo
208.636 49.9912 208.687 43.6152 208.687 43.0781 cv
208.741 41.9551 209.224 41.7412 210.673 41.7412 cv
211.581 41.7412 li
211.851 41.7412 211.902 41.5801 211.902 41.3652 cv
211.902 40.0801 li
211.902 39.9199 211.794 39.8125 211.581 39.8125 cv
211.153 39.8125 208.419 39.9727 206.867 39.9727 cv
204.351 40.0254 201.028 39.8125 200.707 39.8125 cv
200.495 39.8125 200.386 39.9199 200.386 40.1328 cv
200.386 41.3652 li
200.386 41.5801 200.44 41.7412 200.707 41.7412 cv
201.673 41.7412 li
203.925 41.7412 204.402 42.2764 204.402 42.8672 cv
204.402 43.6152 204.511 48.9707 204.511 49.8291 cv
204.511 52.1855 li
204.511 54.0068 204.46 60.8096 204.402 61.2949 cv
204.296 62.2559 203.439 62.3125 202.101 62.3125 cv
200.923 62.3125 li
200.707 62.3125 200.597 62.4707 200.597 62.6328 cv
200.597 63.8105 li
200.597 64.0781 200.707 64.2383 200.923 64.2383 cv
201.245 64.2383 204.351 64.0781 206.171 64.0781 cv
208.582 64.0781 211.368 64.2383 211.794 64.2383 cv
212.065 64.2383 212.117 64.0781 212.117 63.8633 cv
212.117 62.5801 li
212.117 62.418 212.065 62.3125 211.794 62.3125 cv
210.993 62.3125 li
209.438 62.3125 208.797 61.5625 208.687 60.3301 cv
208.636 59.5234 208.636 53.3652 208.636 53.0439 cv
208.636 50.3633 li
cp
ef
237.478 50.9004 mo
237.478 48.7051 237.368 45.3301 237.638 42.8672 cv
237.747 42.1172 238.011 41.7412 239.353 41.7412 cv
239.888 41.7412 li
240.103 41.7412 240.208 41.5801 240.208 41.3652 cv
240.208 40.2422 li
240.208 39.9199 240.103 39.8125 239.833 39.8125 cv
239.458 39.8125 237.585 39.9727 236.458 39.9727 cv
234.745 39.9727 232.44 39.8125 232.067 39.8125 cv
231.802 39.8125 231.691 39.9199 231.691 40.0801 cv
231.691 41.3652 li
231.691 41.6348 231.802 41.7412 232.067 41.7412 cv
232.979 41.7412 li
233.887 41.7412 234.69 42.0605 234.958 42.707 cv
235.227 43.3477 235.388 46.4531 235.388 47.7402 cv
235.495 49.4531 235.55 51.1152 235.55 54.168 cv
235.55 57.7041 li
235.335 57.7041 li
234.69 57.0088 229.71 50.7402 228.743 49.6152 cv
227.62 48.2754 221.46 40.5078 221.298 40.2949 cv
221.083 39.9727 220.763 39.8672 220.014 39.8672 cv
219.371 39.8672 218.243 39.9727 217.39 39.9727 cv
216.798 39.9727 215.94 39.9199 215.246 39.8672 cv
214.549 39.8672 213.96 39.8125 213.853 39.8125 cv
213.638 39.8125 213.529 39.9727 213.529 40.1328 cv
213.529 41.4199 li
213.529 41.6348 213.638 41.7412 213.853 41.7412 cv
214.337 41.7412 li
215.836 41.7412 217.171 42.6533 217.171 44.5801 cv
217.171 50.2051 li
217.171 56.2578 217.069 60.0615 217.015 60.7051 cv
216.853 61.9336 215.995 62.3125 215.46 62.3125 cv
214.228 62.3125 li
214.065 62.3125 214.012 62.3652 214.012 62.4707 cv
214.012 63.8633 li
214.012 64.1318 214.065 64.2383 214.176 64.2383 cv
214.603 64.2383 217.015 64.0781 217.765 64.0781 cv
219.315 64.0781 221.46 64.2383 221.833 64.2383 cv
222.104 64.2383 222.104 64.1318 222.104 63.917 cv
222.104 62.6328 li
222.104 62.418 222.104 62.3125 221.833 62.3125 cv
220.71 62.3125 li
220.175 62.3125 219.583 61.7227 219.424 60.4883 cv
219.315 60.0078 219.102 54.6523 219.102 51.4375 cv
219.102 44.0977 li
219.21 44.0977 li
220.065 45.0625 224.407 50.8477 225.69 52.3467 cv
226.28 53.0439 228.585 55.7754 231.048 58.7227 cv
233.245 61.3477 235.066 63.542 235.44 63.917 cv
235.657 64.0781 236.188 64.4531 236.673 64.4531 cv
237.315 64.4531 237.478 63.917 237.478 63.4365 cv
237.478 50.9004 li
cp
ef
106.694 36.8936 mo
103.676 36.8936 li
103.504 36.8936 103.424 36.7275 103.49 36.4893 cv
103.627 35.9141 li
103.695 35.6768 103.929 35.1328 104.201 35.1328 cv
107.147 35.1328 li
108.167 32.2188 109.152 29.8447 110.947 27.8438 cv
111.897 26.7598 113.762 25.5391 115.968 25.5391 cv
117.934 25.5391 119.018 26.7266 119.018 27.54 cv
119.018 28.5918 118.341 29.0977 117.662 29.0977 cv
116.578 29.0977 116.271 28.4883 116.17 27.7441 cv
116.139 27.4043 115.797 26.7598 114.78 26.7598 cv
111.626 26.7598 110.946 31.2383 109.827 35.0371 cv
109.827 35.0371 114.539 35.1621 118.384 35.1621 cv
122.526 35.1621 124.745 35.0137 125.188 35.0137 cv
125.633 35.0137 125.683 35.1621 125.683 35.3594 cv
125.683 36.4941 li
125.683 36.7422 125.633 36.9355 125.288 36.9355 cv
122.921 36.9355 li
121.539 36.9355 120.849 37.3789 120.849 38.2207 cv
120.849 38.6123 120.9 39.2051 121.046 39.8965 cv
121.343 41.6699 123.167 47.5371 124.055 50.3008 cv
124.644 52.1709 127.507 60.6504 128.64 63.6611 cv
129.774 61.3447 133.62 51.1875 134.015 50.0508 cv
134.509 48.7217 136.381 43.0508 137.121 40.8809 cv
137.512 39.6484 137.81 38.7617 137.81 38.0723 cv
137.81 37.4785 137.466 36.9355 136.232 36.9355 cv
134.951 36.9355 li
134.752 36.9355 134.705 36.7891 134.705 36.4941 cv
134.705 35.3594 li
134.705 35.1133 134.752 35.0137 134.999 35.0137 cv
135.443 35.0137 137.712 35.1621 140.819 35.1621 cv
144.416 35.1621 145.651 35.0137 146.093 35.0137 cv
146.391 35.0137 146.438 35.1133 146.438 35.3594 cv
146.438 36.5918 li
146.438 36.7891 146.391 36.9355 146.093 36.9355 cv
144.763 36.9355 li
143.138 36.9355 142.2 37.7266 141.263 38.8584 cv
139.981 40.4385 136.037 50.5449 135.198 52.6162 cv
134.604 54.2432 128.244 69.9238 127.997 70.4131 cv
127.801 70.8105 127.553 71.0566 127.308 71.0566 cv
126.914 71.0566 126.716 70.5596 126.471 69.9238 cv
124.894 65.3867 120.9 54.1455 120.258 52.3691 cv
119.765 50.6934 li
118.582 47.1934 116.265 40.043 115.622 38.5645 cv
115.129 37.4297 114.638 36.9355 113.601 36.9355 cv
109.017 36.8936 li
108.135 39.6387 106.576 45.4414 104.88 49.7793 cv
102.813 55.0684 100.405 58.832 96.7788 58.832 cv
95.4209 58.832 94.3369 57.916 94.3369 56.8301 cv
94.3369 56.0498 94.9131 55.3711 95.7954 55.3711 cv
96.7788 55.3711 97.2871 56.3203 97.3867 56.8984 cv
97.458 57.2383 97.6924 57.4727 97.9658 57.4727 cv
99.5933 57.4727 101.423 54.626 103.255 48.3555 cv
106.694 36.8936 li
cp
f
240.72 7.98828 mo
240.784 7.94141 240.765 7.94141 240.927 7.95801 cv
241.763 8.05176 244.802 8.33691 250.687 8.33691 cv
252.829 8.33691 li
254.581 8.33691 256.466 8.26465 258.503 8.17969 cv
259.536 8.15039 265.825 8.23047 267.112 8.23047 cv
268.292 8.23047 271.933 8.06836 272.308 8.06836 cv
272.522 8.06836 272.687 8.17383 272.687 8.44336 cv
272.687 9.62109 li
272.687 9.83496 272.63 9.99512 272.308 9.99512 cv
271.503 9.99512 li
270.54 9.99512 270.489 10.5859 270.702 10.9082 cv
271.021 11.3906 275.468 18.5137 276.323 19.7988 cv
277.13 18.4609 281.573 11.9785 281.79 11.5518 cv
282.22 10.6943 282.267 9.99512 281.095 9.99512 cv
280.235 9.99512 li
279.968 9.99512 279.862 9.83496 279.862 9.62109 cv
279.862 8.44336 li
279.862 8.23047 279.968 8.06836 280.235 8.06836 cv
280.558 8.06836 283.235 8.23047 284.841 8.23047 cv
285.812 8.23047 287.681 8.06836 288.003 8.06836 cv
288.272 8.06836 288.378 8.17383 288.378 8.49512 cv
288.378 9.62109 li
288.378 9.89063 288.272 9.99512 288.056 9.99512 cv
287.521 9.99512 li
286.665 9.99512 286.077 10.1582 285.593 10.4258 cv
284.79 10.8545 278.575 19.5879 277.341 21.46 cv
277.341 25.959 li
277.397 27.2988 277.341 28.7461 277.45 29.3906 cv
277.558 30.5137 278.415 30.5684 279.382 30.5684 cv
280.075 30.5684 li
280.343 30.5684 280.448 30.6748 280.448 30.8359 cv
280.448 32.1211 li
280.448 32.3359 280.343 32.4961 280.024 32.4961 cv
279.7 32.4961 276.7 32.3359 274.935 32.3359 cv
273.757 32.3359 270.647 32.4961 270.327 32.4961 cv
270.06 32.4961 269.952 32.3887 269.952 32.0674 cv
269.952 30.8887 li
269.952 30.7285 270.06 30.5684 270.272 30.5684 cv
271.075 30.5684 li
272.79 30.5684 273.11 30.2441 273.165 29.4951 cv
273.22 29.0137 273.22 27.084 273.22 23.9258 cv
273.22 21.9941 li
272.737 21.0322 266.202 11.4414 265.343 10.6406 cv
264.894 10.1865 264.132 10.041 263.647 10.0059 cv
263.966 11.459 264.397 13.3604 264.571 14.2813 cv
264.624 14.4961 264.515 14.6035 264.304 14.7109 cv
263.392 14.9785 li
263.067 15.0869 262.909 15.0322 262.802 14.7646 cv
262.159 13.4238 261.247 11.6563 260.122 10.6406 cv
258.782 10.1582 254.866 10.1025 253.899 10.1025 cv
253.899 19.1035 li
253.899 24.7285 253.899 28.7461 253.954 29.1748 cv
254.063 30.0313 254.329 30.5684 255.187 30.5684 cv
257.228 30.5684 li
257.491 30.5684 257.597 30.7285 257.597 31.0498 cv
257.597 32.1738 li
257.597 32.3359 257.491 32.4961 257.228 32.4961 cv
256.845 32.4961 253.526 32.3359 251.757 32.3359 cv
250.261 32.3359 246.774 32.4961 246.345 32.4961 cv
246.024 32.4961 245.921 32.3359 245.921 32.0146 cv
245.921 30.9434 li
245.921 30.6748 246.024 30.5684 246.241 30.5684 cv
248.384 30.5684 li
249.188 30.5684 249.562 30.1406 249.616 29.709 cv
249.776 27.6748 249.776 24.8359 249.776 21.6221 cv
249.776 10.1025 li
248.761 10.1025 245.751 10.0498 243.767 10.5859 cv
242.431 11.6035 241.304 13.3174 240.606 14.7109 cv
240.499 14.9248 240.341 15.0869 240.124 14.9785 cv
239.161 14.6035 li
238.894 14.4961 238.894 14.2813 238.944 14.0674 cv
239.255 13.0967 240.187 9.79004 240.622 8.16992 cv
240.646 8.08691 240.653 8.0332 240.72 7.98828 cv
cp
f
249.37 50.3633 mo
249.37 53.0439 li
249.37 53.3652 249.37 59.5234 249.427 60.3301 cv
249.534 61.5625 250.175 62.3125 251.731 62.3125 cv
252.345 62.3125 li
253.259 62.3125 254.116 61.7744 254.55 61.1855 cv
254.921 60.7578 257.653 54.3281 258.937 51.6504 cv
259.31 50.9004 262.472 43.6152 262.792 42.707 cv
262.901 42.3848 263.222 41.793 262.847 41.6348 cv
262.739 41.5234 262.581 41.2578 262.634 41.0977 cv
262.581 40.9912 262.687 40.8301 263.169 40.7217 cv
264.187 40.5605 265.687 39.5986 266.169 39.1699 cv
266.278 38.9551 266.491 38.793 266.81 38.793 cv
267.13 38.793 267.241 39.0098 267.349 39.3828 cv
268.097 41.5234 270.831 49.1875 271.528 51.3301 cv
272.329 54.0068 274.634 60.3301 275.009 60.8633 cv
275.704 61.8281 276.616 62.3125 277.528 62.3125 cv
278.544 62.3125 li
278.759 62.3125 278.813 62.4707 278.813 62.6328 cv
278.813 63.7559 li
278.813 63.917 278.759 64.2383 278.435 64.2383 cv
277.796 64.2383 274.954 64.0781 273.722 64.0781 cv
272.704 64.0781 269.542 64.2383 268.847 64.2383 cv
268.474 64.2383 268.419 63.9736 268.419 63.7559 cv
268.419 62.6328 li
268.419 62.4707 268.474 62.3125 268.687 62.3125 cv
269.542 62.3125 li
270.187 62.3125 270.399 61.8281 270.399 61.4004 cv
270.187 60.3301 268.737 56.043 268.312 54.8125 cv
259.685 54.8125 li
259.472 55.4531 257.761 59.9004 257.544 60.541 cv
257.228 61.6172 257.382 62.3125 258.507 62.3125 cv
259.849 62.3125 li
260.167 62.3125 260.224 62.4707 260.224 62.6836 cv
260.224 63.8633 li
260.224 64.0781 260.167 64.2383 259.901 64.2383 cv
259.472 64.2383 256.634 64.0781 255.778 64.0781 cv
255.112 64.0781 248.542 64.0781 246.907 64.0781 cv
245.087 64.0781 241.981 64.2383 241.659 64.2383 cv
241.444 64.2383 241.337 64.0781 241.337 63.8105 cv
241.337 62.6328 li
241.337 62.4707 241.444 62.3125 241.659 62.3125 cv
242.841 62.3125 li
244.177 62.3125 245.034 62.2559 245.142 61.2949 cv
245.194 60.8096 245.247 54.0068 245.247 52.1855 cv
245.247 49.8291 li
245.247 48.9707 245.142 43.6152 245.142 42.8672 cv
245.142 42.2764 244.659 41.7412 242.407 41.7412 cv
241.444 41.7412 li
241.177 41.7412 241.122 41.5801 241.122 41.3652 cv
241.122 40.1328 li
241.122 39.9199 241.231 39.8125 241.444 39.8125 cv
241.767 39.8125 245.087 40.0254 247.603 39.9727 cv
249.159 39.9727 251.89 39.8125 252.319 39.8125 cv
252.536 39.8125 252.64 39.9199 252.64 40.0801 cv
252.64 41.3652 li
252.64 41.5801 252.591 41.7412 252.319 41.7412 cv
251.411 41.7412 li
249.962 41.7412 249.479 41.9551 249.427 43.0781 cv
249.427 43.6152 249.37 49.9912 249.37 50.3633 cv
cp
260.491 53.0967 mo
267.776 53.0967 li
267.563 52.3467 265.046 44.3115 264.937 43.8828 cv
264.831 43.5625 264.774 43.3477 264.616 43.3477 cv
264.452 43.3477 264.349 43.5098 264.187 43.9375 cv
264.024 44.3643 260.761 52.5605 260.491 53.0967 cv
cp
f
151.389 8.44336 mo
151.389 9.67578 li
151.389 9.89063 151.229 9.99512 151.011 9.99512 cv
149.778 9.99512 li
149.087 9.99512 148.28 10.1025 148.28 10.8027 cv
148.28 12.0313 149.192 14.1211 150.638 18.6221 cv
151.065 19.9609 153.049 26.1758 153.37 27.0332 cv
153.53 27.0332 li
153.853 25.9072 156.476 19.2637 156.745 18.4609 cv
158.78 12.5156 159.474 11.0693 159.474 10.5313 cv
159.474 10.2656 159.264 9.99512 158.349 9.99512 cv
157.763 9.99512 li
157.55 9.99512 157.441 9.89063 157.441 9.62109 cv
157.441 8.39063 li
157.441 8.23047 157.55 8.06836 157.763 8.06836 cv
158.084 8.06836 160.868 8.23047 162.103 8.23047 cv
162.994 8.23047 169.509 8.23047 170.29 8.23047 cv
182.288 8.17383 li
182.825 8.17383 183.522 8.06836 183.738 8.06836 cv
183.844 8.06836 183.95 8.17383 184.058 8.81934 cv
184.165 9.30078 185.663 13.9063 185.772 14.2813 cv
185.825 14.4961 185.825 14.6035 185.719 14.6563 cv
184.864 15.0322 li
184.754 15.0869 184.538 15.0869 184.379 14.8184 cv
184.271 14.6563 181.701 11.6563 180.79 10.8027 cv
180.146 10.2109 179.29 9.99512 178.755 9.99512 cv
173.075 9.89063 li
173.075 18.9961 li
173.396 18.9961 176.56 18.8359 176.987 18.7275 cv
178.378 18.3535 178.917 17.6055 178.917 15.9414 cv
178.917 15.7275 178.969 15.6748 179.181 15.6748 cv
180.362 15.7275 li
180.574 15.7275 180.736 15.8379 180.683 16.0488 cv
180.574 16.5322 180.574 19.3721 180.574 19.8535 cv
180.574 21.0322 180.736 22.6934 180.79 23.3896 cv
180.79 23.6035 180.683 23.6582 180.522 23.6582 cv
179.396 23.7637 li
179.235 23.7637 179.128 23.7637 179.073 23.5508 cv
178.808 22.2109 178.485 21.3535 177.094 21.0322 cv
175.487 20.6582 173.608 20.6582 173.075 20.6582 cv
173.075 22.4775 li
173.075 24.3525 173.183 27.459 173.183 28.1553 cv
173.183 30.6748 174.739 30.8359 177.04 30.8359 cv
179.396 30.8359 180.897 30.7813 182.718 29.3369 cv
183.147 29.0137 185.022 26.6035 185.556 25.7441 cv
185.825 25.3711 186.09 25.3164 186.254 25.4248 cv
187.111 25.9072 li
187.218 25.959 187.323 26.1211 187.271 26.2813 cv
185.343 31.959 li
185.237 32.2275 184.967 32.4961 184.754 32.4961 cv
184.379 32.4961 181.539 32.3359 170.29 32.3359 cv
169.325 32.3359 166.378 32.4961 165.737 32.4961 cv
165.47 32.4961 165.417 32.3359 165.417 32.1211 cv
165.417 30.8887 li
165.417 30.6748 165.522 30.5684 165.792 30.5684 cv
166.271 30.5684 li
168.79 30.5684 168.95 30.3535 168.95 29.6016 cv
168.95 21.5146 li
168.95 18.1934 li
168.95 15.3535 168.897 11.8711 168.846 11.334 cv
168.683 10.2109 168.361 9.99512 166.217 9.99512 cv
165.797 9.99512 li
165.683 9.99512 li
164.942 9.99512 li
163.923 9.99512 163.173 10.3184 162.688 10.8027 cv
161.675 11.8174 158.78 18.8359 158.247 20.2275 cv
157.763 21.3535 153.37 31.8535 152.942 32.5498 cv
152.782 32.8174 152.516 32.9766 152.083 32.9766 cv
151.655 32.9766 151.389 32.6035 151.229 32.1738 cv
150.049 29.0137 147.208 21.248 146.78 20.0684 cv
146.406 18.8887 li
145.497 16.4258 143.89 11.5518 143.515 11.0137 cv
143.084 10.4258 142.655 9.99512 141.958 9.99512 cv
141.423 9.99512 li
141.211 9.99512 141.157 9.83496 141.157 9.67578 cv
141.157 8.33691 li
141.157 8.17383 141.263 8.06836 141.479 8.06836 cv
141.745 8.06836 144.69 8.23047 146.083 8.23047 cv
147.37 8.23047 150.638 8.06836 150.96 8.06836 cv
151.282 8.06836 151.389 8.17383 151.389 8.44336 cv
cp
f
0.7731 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
0.283691 77.332 mo
288.456 77.332 li
0.15 0.5 1 0 cmyk
@
0.274902 125.823 mo
288.466 125.823 li
@
1.01221 94.793 mo
1.1001 94.793 1.14404 94.8369 1.14404 94.9688 cv
1.18799 95.6729 1.36377 96.5088 1.97998 97.4766 cv
2.64014 98.5327 3.78418 99.0605 4.88379 99.0605 cv
6.07178 99.0605 7.74414 98.3125 7.74414 96.4868 cv
7.74414 94.4629 6.81982 93.8027 4.48779 92.9229 cv
3.78418 92.6587 2.33203 92.043 1.27588 91.0747 cv
0.527832 90.3706 0.175781 89.271 0.175781 87.9287 cv
0.175781 86.6968 0.660156 85.6851 1.71582 84.8486 cv
2.59619 84.1011 3.56396 83.793 4.83984 83.793 cv
6.29199 83.793 7.17188 84.145 7.61182 84.3208 cv
7.83203 84.4087 7.96387 84.3647 8.07373 84.2549 cv
8.35986 83.9688 li
8.44775 83.8809 8.53613 83.8369 8.66797 83.8369 cv
8.7998 83.8369 8.84375 83.9688 8.84375 84.189 cv
8.84375 84.541 9.1958 87.6206 9.1958 87.8408 cv
9.1958 87.9287 9.15186 87.9727 9.06396 87.9946 cv
8.71191 88.105 li
8.62402 88.127 8.53613 88.105 8.4917 87.9727 cv
8.27197 87.3569 7.91992 86.4771 7.12793 85.6406 cv
6.55615 85.0249 5.85205 84.7168 4.83984 84.7168 cv
3.08008 84.7168 2.37598 86.125 2.37598 86.939 cv
2.37598 87.687 2.46387 88.3467 2.99219 88.9189 cv
3.56396 89.4907 4.7959 90.0186 5.67578 90.2827 cv
6.95215 90.6787 8.00781 91.1187 8.84375 91.999 cv
9.54785 92.7466 9.94385 93.6709 9.94385 95.1445 cv
9.94385 97.8286 8.18408 100.029 5.27979 100.029 cv
3.47607 100.029 2.41992 99.6328 1.54004 98.9727 cv
1.27588 98.7969 1.14404 98.7085 1.01221 98.7085 cv
0.879883 98.7085 0.791992 98.8848 0.660156 99.1045 cv
0.527832 99.3247 0.439941 99.3687 0.26416 99.3687 cv
0.0878906 99.3687 0 99.2368 0 99.0166 cv
0.0439453 98.7529 0.352051 95.189 0.395996 94.9248 cv
0.417969 94.793 0.439941 94.7485 0.527832 94.7485 cv
1.01221 94.793 li
cp
0.9 0.5 0.05 0.3 cmyk
f
25.6641 96.7939 mo
25.7178 96.8477 25.7354 96.9009 25.6997 96.9722 cv
24.6309 98.5049 22.9199 99.9658 20.3896 99.9658 cv
18.1089 99.9658 16.8257 99.2891 15.7207 98.291 cv
14.4023 97.1147 13.7964 95.0479 13.7964 93.4795 cv
13.7964 91.7334 14.3667 90.0581 15.6138 88.7041 cv
16.5762 87.6704 18.1089 86.8149 20.2471 86.8149 cv
21.8862 86.8149 23.2051 87.314 23.8467 87.6704 cv
24.0962 87.813 24.1675 87.813 24.2031 87.6704 cv
24.3457 87.207 li
24.3813 87.1001 24.417 87.1001 24.6309 87.1001 cv
24.8447 87.1001 24.8804 87.1357 24.8804 87.3853 cv
24.8804 87.7061 25.2368 90.5571 25.3081 91.0918 cv
25.3257 91.1987 25.3081 91.252 25.2368 91.27 cv
24.8979 91.377 li
24.8091 91.4126 24.7554 91.3413 24.7021 91.1987 cv
24.4883 90.5571 24.0605 89.666 23.312 88.8818 cv
22.5278 88.1338 21.6016 87.5635 20.2114 87.5635 cv
17.3604 87.5635 16.1841 90.1294 16.1841 92.6953 cv
16.1841 93.8003 16.5049 95.9033 17.8237 97.3286 cv
18.9995 98.5762 20.0332 98.7188 20.8887 98.7188 cv
22.8486 98.7188 24.3989 97.7388 25.1475 96.6514 cv
25.2368 96.5269 25.3081 96.4731 25.3613 96.5269 cv
25.6641 96.7939 li
cp
f
32.4541 93.4976 mo
32.2578 93.4976 32.2046 93.5688 32.2046 93.729 cv
32.2046 94.4951 li
32.2046 95.1367 32.2402 97.2041 32.2759 98.4336 cv
32.2935 98.8613 32.4897 99.0396 32.8818 99.0396 cv
33.5229 99.0396 li
33.6655 99.0396 33.7012 99.0752 33.7012 99.1641 cv
33.7012 99.5742 li
33.7012 99.6807 33.6655 99.752 33.5229 99.752 cv
33.2026 99.752 32.5967 99.6987 31.1353 99.6987 cv
29.3892 99.6987 28.8545 99.752 28.498 99.752 cv
28.3555 99.752 28.3198 99.6807 28.3198 99.5918 cv
28.3198 99.1821 li
28.3198 99.0752 28.3555 99.0396 28.498 99.0396 cv
29.4248 99.0396 li
29.8521 99.0396 29.9233 98.6118 29.9233 98.2017 cv
29.9233 97.3467 29.959 95.3149 29.959 94.1748 cv
29.959 91.8936 li
29.959 91.3589 29.9233 89.1494 29.9233 88.8818 cv
29.9233 87.9912 29.8164 87.7417 29.2466 87.7417 cv
28.4624 87.7417 li
28.3198 87.7417 28.2842 87.6704 28.2842 87.5811 cv
28.2842 87.207 li
28.2842 87.1357 28.3198 87.0288 28.4624 87.0288 cv
28.7832 87.0288 29.3535 87.082 31.0996 87.082 cv
32.7036 87.082 33.3447 87.0288 33.6655 87.0288 cv
33.8081 87.0288 33.8438 87.1001 33.8438 87.189 cv
33.8438 87.5635 li
33.8438 87.6704 33.8081 87.7417 33.6655 87.7417 cv
33.0244 87.7417 li
32.3828 87.7417 32.3115 88.0269 32.2935 88.7217 cv
32.2759 88.9712 32.2046 91.3232 32.2046 91.7866 cv
32.2046 92.4995 li
32.2046 92.6777 32.2578 92.749 32.4185 92.749 cv
38.2988 92.749 li
38.584 92.749 38.6553 92.6953 38.6553 92.4995 cv
38.6553 91.9648 li
38.6553 91.3232 38.584 88.8286 38.5664 88.6328 cv
38.5483 88.0625 38.4771 87.7417 38.085 87.7417 cv
37.2651 87.7417 li
37.1406 87.7417 37.1226 87.688 37.1226 87.5811 cv
37.1226 87.1714 li
37.1226 87.082 37.1406 87.0288 37.2651 87.0288 cv
37.5859 87.0288 38.3701 87.082 39.7959 87.082 cv
41.1499 87.082 41.8628 87.0288 42.1479 87.0288 cv
42.3262 87.0288 42.3618 87.1001 42.3618 87.189 cv
42.3618 87.5635 li
42.3618 87.6704 42.3262 87.7417 42.1479 87.7417 cv
41.5063 87.7417 li
40.9717 87.7417 40.936 88.0269 40.936 88.6504 cv
40.936 88.8999 40.9004 91.3232 40.9004 91.8936 cv
40.9004 93.8184 li
40.9004 94.6021 40.936 97.1328 40.936 98.1484 cv
40.936 98.79 41.1143 99.0396 41.6489 99.0396 cv
42.3618 99.0396 li
42.4688 99.0396 42.5044 99.0928 42.5044 99.1641 cv
42.5044 99.5742 li
42.5044 99.6807 42.4688 99.752 42.3262 99.752 cv
42.041 99.752 41.4351 99.6987 39.9028 99.6987 cv
38.2275 99.6987 37.6572 99.752 37.1582 99.752 cv
37.0513 99.752 37.0156 99.6631 37.0156 99.5918 cv
37.0156 99.1821 li
37.0156 99.0928 37.0337 99.0396 37.1582 99.0396 cv
38.1206 99.0396 li
38.5483 99.0396 38.5664 98.7188 38.584 98.2373 cv
38.6196 97.3823 38.6553 94.5308 38.6553 94.21 cv
38.6553 93.7114 li
38.6553 93.5508 38.5127 93.4976 38.2632 93.4976 cv
32.4541 93.4976 li
cp
f
49.666 88.5972 mo
48.5786 89.6484 48.062 91.4839 48.062 92.9092 cv
48.062 97.5425 50.9131 99.1821 52.4102 99.1821 cv
56.0098 99.1821 56.5801 95.1904 56.5801 93.6934 cv
56.5801 89.8086 53.9424 87.5991 52.2319 87.5991 cv
51.9111 87.5991 50.8774 87.4209 49.666 88.5972 cv
cp
56.5088 88.2407 mo
57.8452 89.3276 58.9321 91.0918 58.9321 93.5151 cv
58.9321 94.834 58.5757 96.2236 57.6133 97.4355 cv
56.4731 98.8613 54.9404 99.9658 52.2676 99.9658 cv
51.1982 99.9658 49.666 99.6455 48.2402 98.79 cv
46.9751 98.0234 45.6387 96.0811 45.6387 93.5151 cv
45.6387 92.4458 45.9414 90.7529 47.2778 89.0957 cv
48.8462 87.1714 50.7705 86.8149 52.3032 86.8149 cv
53.6221 86.8149 55.0474 87.0645 56.5088 88.2407 cv
cp
f
66.5371 88.5972 mo
65.4497 89.6484 64.9331 91.4839 64.9331 92.9092 cv
64.9331 97.5425 67.7842 99.1821 69.2813 99.1821 cv
72.8809 99.1821 73.4512 95.1904 73.4512 93.6934 cv
73.4512 89.8086 70.8135 87.5991 69.103 87.5991 cv
68.7822 87.5991 67.7485 87.4209 66.5371 88.5972 cv
cp
73.3799 88.2407 mo
74.7163 89.3276 75.8032 91.0918 75.8032 93.5151 cv
75.8032 94.834 75.4468 96.2236 74.4844 97.4355 cv
73.3442 98.8613 71.8115 99.9658 69.1387 99.9658 cv
68.0693 99.9658 66.5371 99.6455 65.1113 98.79 cv
63.8462 98.0234 62.5098 96.0811 62.5098 93.5151 cv
62.5098 92.4458 62.8125 90.7529 64.1489 89.0957 cv
65.7173 87.1714 67.6416 86.8149 69.1743 86.8149 cv
70.4932 86.8149 71.9185 87.0645 73.3799 88.2407 cv
cp
f
89.8276 96.0278 mo
89.8633 96.0635 89.8633 96.0991 89.8633 96.2061 cv
89.792 96.313 89.0791 99.271 88.9722 99.752 cv
88.5088 99.7344 83.377 99.6987 81.5591 99.6987 cv
79.9556 99.6987 79.314 99.752 79.1001 99.752 cv
78.9575 99.752 78.9575 99.7163 78.9575 99.5918 cv
78.9575 99.1821 li
78.9575 99.0752 78.9575 99.0396 79.0645 99.0396 cv
79.7773 99.0396 li
80.4185 99.0396 80.5254 98.79 80.5254 98.5581 cv
80.5254 98.2373 80.5967 93.7827 80.5967 92.7134 cv
80.5967 91.7153 li
80.5967 90.5752 80.561 88.686 80.5254 88.3833 cv
80.4897 87.9199 80.4185 87.7417 79.9556 87.7417 cv
79.207 87.7417 li
79.1001 87.7417 79.0645 87.6348 79.0645 87.5811 cv
79.0645 87.1714 li
79.0645 87.0645 79.1001 87.0288 79.207 87.0288 cv
79.3853 87.0288 80.0269 87.082 81.666 87.082 cv
83.5908 87.082 84.3389 87.0288 84.4814 87.0288 cv
84.624 87.0288 84.6597 87.1001 84.6597 87.189 cv
84.6597 87.5991 li
84.6597 87.6704 84.624 87.7417 84.4814 87.7417 cv
83.5195 87.7417 li
82.9849 87.7417 82.9136 87.9199 82.9136 88.4009 cv
82.9136 88.6504 82.8423 91.3232 82.8423 92.5708 cv
82.8423 94.1035 li
82.8423 94.4238 82.8423 98.2729 82.9136 99.0396 cv
83.9111 99.0396 li
84.9092 99.0396 86.1924 99.0396 86.9053 98.9502 cv
87.9028 98.8076 89.0435 96.6694 89.293 95.9922 cv
89.3643 95.9209 89.3999 95.8853 89.5068 95.9209 cv
89.8276 96.0278 li
cp
f
103.258 88.5972 mo
102.17 89.6484 101.654 91.4839 101.654 92.9092 cv
101.654 97.5425 104.505 99.1821 106.002 99.1821 cv
109.602 99.1821 110.172 95.1904 110.172 93.6934 cv
110.172 89.8086 107.534 87.5991 105.824 87.5991 cv
105.503 87.5991 104.469 87.4209 103.258 88.5972 cv
cp
110.101 88.2407 mo
111.437 89.3276 112.524 91.0918 112.524 93.5151 cv
112.524 94.834 112.167 96.2236 111.205 97.4355 cv
110.065 98.8613 108.532 99.9658 105.859 99.9658 cv
104.79 99.9658 103.258 99.6455 101.832 98.79 cv
100.567 98.0234 99.2305 96.0811 99.2305 93.5151 cv
99.2305 92.4458 99.5332 90.7529 100.87 89.0957 cv
102.438 87.1714 104.362 86.8149 105.895 86.8149 cv
107.214 86.8149 108.639 87.0645 110.101 88.2407 cv
cp
f
119.599 93.4082 mo
120.098 93.4082 121.22 93.3906 121.505 93.3193 cv
121.862 93.2837 122.147 93.0698 122.45 92.624 cv
122.592 92.3926 122.699 92.0361 122.771 91.7153 cv
122.788 91.644 122.842 91.5728 122.913 91.5728 cv
123.27 91.6084 li
123.341 91.6084 123.376 91.644 123.376 91.7153 cv
123.341 92.0361 123.341 93.4976 123.341 93.7471 cv
123.341 94.3882 123.412 95.2437 123.448 95.6001 cv
123.465 95.7251 123.412 95.7607 123.341 95.7783 cv
122.949 95.8496 li
122.877 95.8496 122.824 95.814 122.806 95.707 cv
122.788 95.5825 122.628 95.0298 122.539 94.8696 cv
122.325 94.4775 122.004 94.21 121.648 94.1387 cv
120.971 94.0322 120.133 94.0322 119.599 94.0322 cv
119.599 98.4692 li
119.599 98.9683 119.741 99.0396 120.169 99.0396 cv
121.131 99.0396 li
121.238 99.0396 121.273 99.0752 121.273 99.1641 cv
121.273 99.6094 li
121.273 99.7163 121.238 99.752 121.131 99.752 cv
120.953 99.752 120.24 99.6987 118.494 99.6987 cv
116.89 99.6987 116.213 99.752 115.963 99.752 cv
115.892 99.752 115.856 99.7163 115.856 99.6274 cv
115.856 99.1465 li
115.856 99.0752 115.892 99.0396 115.963 99.0396 cv
116.676 99.0396 li
117.104 99.0396 117.246 98.9683 117.264 98.665 cv
117.282 98.3086 117.317 96.0635 117.317 92.9985 cv
117.317 91.751 li
117.317 90.9668 117.282 88.4365 117.282 88.2407 cv
117.282 87.9199 117.032 87.7417 116.569 87.7417 cv
115.678 87.7417 li
115.607 87.7417 115.536 87.7061 115.536 87.6523 cv
115.536 87.1357 li
115.536 87.0645 115.607 87.0288 115.678 87.0288 cv
115.856 87.0288 116.534 87.082 118.565 87.082 cv
118.814 87.082 123.519 87.0464 124.659 87.0464 cv
124.98 87.0464 125.265 86.9751 125.336 86.9751 cv
125.408 87.0107 125.443 87.082 125.443 87.2246 cv
125.515 87.5098 126.085 89.9692 126.156 90.1831 cv
126.174 90.2544 126.156 90.3076 126.103 90.3257 cv
125.764 90.4678 li
125.693 90.5039 125.657 90.4678 125.55 90.3257 cv
125.372 90.0049 124.909 89.3989 124.267 88.686 cv
123.982 88.2939 123.519 87.9731 123.056 87.8662 cv
122.592 87.7773 120.276 87.7061 119.599 87.7061 cv
119.599 93.4082 li
cp
f
140.019 93.3188 mo
140.04 94.5068 140.084 96.6626 140.084 97.0586 cv
140.084 98.2026 140.479 98.6426 140.964 98.7749 cv
141.315 98.8628 141.844 98.9507 142.68 98.9507 cv
143.075 98.9507 144.088 98.9067 144.528 98.8628 cv
144.924 98.8188 145.76 98.5986 146.331 98.1147 cv
146.728 97.7627 147.96 96.3105 148.378 95.7827 cv
148.466 95.6729 148.532 95.6509 148.62 95.6948 cv
148.972 95.9146 li
149.038 95.959 149.06 96.0249 149.016 96.1348 cv
147.96 99.4346 li
147.894 99.6328 147.739 99.7646 147.476 99.7646 cv
147.256 99.7646 145.54 99.6987 138.192 99.6987 cv
136.564 99.6987 135.772 99.7646 135.376 99.7646 cv
135.244 99.7646 135.2 99.7207 135.2 99.5889 cv
135.2 99.0605 li
135.2 98.9287 135.244 98.8848 135.42 98.8848 cv
136.168 98.8848 li
137.18 98.8848 137.268 98.7529 137.268 97.939 cv
137.268 92.7026 li
137.268 90.5469 li
137.268 88.7427 137.224 86.0146 137.18 85.707 cv
137.092 85.1128 136.872 84.937 136.212 84.937 cv
135.376 84.937 li
135.288 84.937 135.244 84.8931 135.244 84.7827 cv
135.244 84.2109 li
135.244 84.1011 135.266 84.0566 135.376 84.0566 cv
135.86 84.0566 136.652 84.145 138.456 84.123 cv
139.072 84.123 li
140.04 84.123 145.1 84.0786 146.067 84.0786 cv
146.42 84.0786 146.838 84.0566 146.948 84.0566 cv
147.058 84.0566 147.102 84.1011 147.124 84.189 cv
147.212 84.4746 148.048 87.4668 148.136 87.687 cv
148.18 87.8188 148.157 87.8848 148.069 87.9287 cv
147.674 88.105 li
147.608 88.127 147.542 88.105 147.476 87.9946 cv
147.388 87.8628 145.584 85.8389 145.056 85.5308 cv
144.594 85.2666 144 84.981 143.384 84.959 cv
140.04 84.8706 li
139.995 91.229 li
140.655 91.229 142.239 91.1846 142.504 91.1187 cv
142.987 91.0308 143.252 90.855 143.516 90.3267 cv
143.647 90.041 143.868 89.4907 143.868 89.0947 cv
143.868 88.9629 143.956 88.9189 144.044 88.9189 cv
144.616 88.9629 li
144.704 88.9629 144.771 89.0068 144.747 89.1387 cv
144.704 89.4907 144.704 90.9429 144.704 91.5146 cv
144.704 92.3945 144.792 93.4507 144.836 93.9346 cv
144.836 94.0449 144.792 94.0669 144.659 94.0889 cv
144.176 94.1768 li
144.088 94.1987 144.044 94.1548 144 94.0229 cv
143.911 93.6709 143.758 93.1865 143.647 92.9229 cv
143.45 92.4829 143.032 92.1748 142.548 92.1309 cv
141.756 92.043 140.7 91.999 139.995 91.999 cv
140.019 93.3188 li
cp
f
154.312 91.644 mo
154.312 94.6733 154.454 97.1685 154.489 97.7207 cv
154.524 98.6118 154.739 99.0396 155.38 99.0396 cv
155.844 99.0396 li
155.986 99.0396 155.986 99.1108 155.986 99.1997 cv
155.986 99.6094 li
155.986 99.7163 155.986 99.752 155.844 99.752 cv
155.665 99.752 154.597 99.6987 153.919 99.6987 cv
153.456 99.6987 152.244 99.752 152.065 99.752 cv
151.995 99.752 151.959 99.7163 151.959 99.5918 cv
151.959 99.1465 li
151.959 99.1108 151.995 99.0396 152.065 99.0396 cv
152.672 99.0396 li
153.135 99.0396 153.384 98.6475 153.474 97.5605 cv
153.491 97.2397 153.599 94.7446 153.599 91.8936 cv
153.599 89.6304 li
153.599 88.5615 152.993 87.7417 152.208 87.7417 cv
151.638 87.7417 li
151.567 87.7236 151.531 87.688 151.531 87.6167 cv
151.531 87.1357 li
151.531 87.0645 151.567 87.0288 151.638 87.0288 cv
151.728 87.0288 151.87 87.0464 152.19 87.0645 cv
152.511 87.082 152.993 87.082 153.776 87.082 cv
154.079 87.082 154.347 87.0645 154.561 87.0464 cv
154.792 87.0464 154.952 87.0288 155.06 87.0288 cv
155.273 87.0288 155.38 87.082 155.487 87.189 cv
155.665 87.3672 159.158 91.751 159.515 92.25 cv
159.765 92.5352 162.544 95.9922 162.829 96.3486 cv
162.9 96.3486 li
162.9 94.4951 li
162.9 92.9272 162.9 92.0361 162.864 91.145 cv
162.829 90.4678 162.758 88.7217 162.669 88.4189 cv
162.544 87.9912 162.151 87.7417 161.724 87.7417 cv
161.153 87.7417 li
161.047 87.7417 161.047 87.6704 161.047 87.5811 cv
161.047 87.1714 li
161.047 87.0645 161.047 87.0288 161.189 87.0288 cv
161.403 87.0288 161.974 87.082 163.186 87.082 cv
164.255 87.082 164.683 87.0288 164.896 87.0288 cv
165.038 87.0288 165.074 87.1001 165.074 87.1533 cv
165.074 87.5635 li
165.074 87.6704 165.038 87.7417 164.968 87.7417 cv
164.468 87.7417 li
164.112 87.7417 163.935 88.0269 163.88 88.686 cv
163.792 89.8979 163.613 92.8916 163.613 94.709 cv
163.613 99.4136 li
163.613 99.6631 163.613 99.9126 163.399 99.9126 cv
163.149 99.9126 162.937 99.77 162.794 99.6274 cv
162.651 99.4492 161.688 98.3442 160.583 97.0259 cv
159.337 95.4932 157.946 93.8184 157.732 93.5332 cv
157.483 93.2837 154.632 89.7197 154.418 89.4702 cv
154.312 89.4702 li
154.312 91.644 li
cp
f
180.203 97.9346 mo
180.203 98.1841 180.274 98.3623 180.274 98.5049 cv
180.274 98.6475 180.167 98.7188 179.989 98.79 cv
178.528 99.5386 177.067 99.9658 174.929 99.9658 cv
173.183 99.9658 171.009 99.3604 169.796 97.8989 cv
168.692 96.687 168.157 95.1548 168.157 93.0518 cv
168.157 91.4126 168.87 89.7017 170.188 88.5615 cv
171.472 87.4209 173.11 86.8149 175.249 86.8149 cv
176.96 86.8149 178.314 87.3496 178.885 87.7773 cv
179.099 87.9375 179.206 87.8843 179.313 87.7417 cv
179.526 87.4565 li
179.615 87.3315 179.669 87.2783 179.776 87.2783 cv
179.954 87.2783 179.989 87.3853 179.989 87.5278 cv
180.167 91.0918 li
180.167 91.2344 180.167 91.3232 180.097 91.3413 cv
179.669 91.4126 li
179.562 91.4302 179.526 91.377 179.491 91.27 cv
179.241 90.5571 178.778 89.5591 178.065 88.8105 cv
177.459 88.1694 176.461 87.5635 175.106 87.5635 cv
174.002 87.5635 173.04 87.8486 172.077 88.9531 cv
171.222 89.9155 170.616 91.4126 170.616 92.9805 cv
170.616 95.0835 171.187 96.9009 172.22 97.9346 cv
173.075 98.7544 173.931 99.1465 175.071 99.1465 cv
176.212 99.1465 176.889 99.0039 177.495 98.6831 cv
177.887 98.4692 177.923 97.9702 177.923 97.0435 cv
177.923 95.7427 li
177.923 95.1011 177.744 94.9229 177.28 94.9229 cv
176.532 94.9229 li
176.425 94.9229 176.39 94.8516 176.39 94.7627 cv
176.39 94.3525 li
176.39 94.2456 176.425 94.21 176.497 94.21 cv
176.71 94.21 177.565 94.2637 179.027 94.2637 cv
180.524 94.2637 181.13 94.21 181.308 94.21 cv
181.45 94.21 181.486 94.2456 181.486 94.335 cv
181.486 94.7803 li
181.486 94.8872 181.45 94.9229 181.344 94.9229 cv
180.737 94.9229 li
180.417 94.9229 180.203 95.0654 180.203 95.5825 cv
180.203 97.9346 li
cp
f
188.258 93.9253 mo
188.258 94.1035 188.294 98.2017 188.294 98.3979 cv
188.294 98.9683 188.579 99.0396 189.007 99.0396 cv
189.755 99.0396 li
189.825 99.0396 189.897 99.0752 189.897 99.1641 cv
189.897 99.6094 li
189.897 99.7163 189.825 99.752 189.719 99.752 cv
189.505 99.752 188.792 99.6987 187.117 99.6987 cv
185.335 99.6987 184.552 99.752 184.373 99.752 cv
184.267 99.752 184.23 99.7163 184.23 99.6274 cv
184.23 99.1465 li
184.23 99.0752 184.267 99.0396 184.373 99.0396 cv
185.086 99.0396 li
185.442 99.0396 185.834 99.0039 185.905 98.5225 cv
185.94 98.2729 185.977 94.4238 185.977 93.4619 cv
185.977 92.2144 li
185.977 91.7866 185.94 88.5791 185.923 88.3477 cv
185.87 87.9199 185.691 87.7417 185.192 87.7417 cv
184.267 87.7417 li
184.159 87.7417 184.124 87.7061 184.124 87.6167 cv
184.124 87.1533 li
184.124 87.0645 184.159 87.0288 184.23 87.0288 cv
184.444 87.0288 185.371 87.082 187.117 87.082 cv
188.828 87.082 189.397 87.0288 189.647 87.0288 cv
189.755 87.0288 189.79 87.1001 189.79 87.189 cv
189.79 87.5991 li
189.79 87.7061 189.719 87.7417 189.647 87.7417 cv
188.971 87.7417 li
188.579 87.7417 188.294 87.8843 188.294 88.2227 cv
188.294 88.4009 188.258 92.3213 188.258 92.5352 cv
188.258 93.9253 li
cp
f
195.153 91.644 mo
195.153 94.6733 195.296 97.1685 195.332 97.7207 cv
195.368 98.6118 195.581 99.0396 196.224 99.0396 cv
196.687 99.0396 li
196.829 99.0396 196.829 99.1108 196.829 99.1997 cv
196.829 99.6094 li
196.829 99.7163 196.829 99.752 196.687 99.752 cv
196.509 99.752 195.438 99.6987 194.762 99.6987 cv
194.298 99.6987 193.087 99.752 192.909 99.752 cv
192.837 99.752 192.802 99.7163 192.802 99.5918 cv
192.802 99.1465 li
192.802 99.1108 192.837 99.0396 192.909 99.0396 cv
193.515 99.0396 li
193.978 99.0396 194.228 98.6475 194.316 97.5605 cv
194.334 97.2397 194.44 94.7446 194.44 91.8936 cv
194.44 89.6304 li
194.44 88.5615 193.835 87.7417 193.052 87.7417 cv
192.481 87.7417 li
192.409 87.7236 192.374 87.688 192.374 87.6167 cv
192.374 87.1357 li
192.374 87.0645 192.409 87.0288 192.481 87.0288 cv
192.569 87.0288 192.712 87.0464 193.033 87.0645 cv
193.354 87.082 193.835 87.082 194.619 87.082 cv
194.923 87.082 195.189 87.0645 195.403 87.0464 cv
195.636 87.0464 195.796 87.0288 195.902 87.0288 cv
196.116 87.0288 196.224 87.082 196.33 87.189 cv
196.509 87.3672 200.001 91.751 200.357 92.25 cv
200.606 92.5352 203.387 95.9922 203.672 96.3486 cv
203.743 96.3486 li
203.743 94.4951 li
203.743 92.9272 203.743 92.0361 203.708 91.145 cv
203.672 90.4678 203.601 88.7217 203.511 88.4189 cv
203.387 87.9912 202.995 87.7417 202.567 87.7417 cv
201.997 87.7417 li
201.89 87.7417 201.89 87.6704 201.89 87.5811 cv
201.89 87.1714 li
201.89 87.0645 201.89 87.0288 202.032 87.0288 cv
202.246 87.0288 202.816 87.082 204.028 87.082 cv
205.097 87.082 205.524 87.0288 205.739 87.0288 cv
205.882 87.0288 205.917 87.1001 205.917 87.1533 cv
205.917 87.5635 li
205.917 87.6704 205.882 87.7417 205.81 87.7417 cv
205.312 87.7417 li
204.954 87.7417 204.776 88.0269 204.724 88.686 cv
204.634 89.8979 204.456 92.8916 204.456 94.709 cv
204.456 99.4136 li
204.456 99.6631 204.456 99.9126 204.242 99.9126 cv
203.993 99.9126 203.778 99.77 203.636 99.6274 cv
203.493 99.4492 202.531 98.3442 201.427 97.0259 cv
200.179 95.4932 198.789 93.8184 198.575 93.5332 cv
198.325 93.2837 195.475 89.7197 195.261 89.4702 cv
195.153 89.4702 li
195.153 91.644 li
cp
f
212.724 94.5308 mo
212.742 95.4932 212.778 97.2397 212.778 97.5605 cv
212.778 98.4868 213.099 98.8433 213.491 98.9502 cv
213.775 99.0215 214.203 99.0928 214.88 99.0928 cv
215.201 99.0928 216.021 99.0571 216.378 99.0215 cv
216.698 98.9858 217.375 98.8076 217.839 98.4155 cv
218.159 98.1304 219.157 96.9546 219.495 96.5269 cv
219.567 96.4375 219.62 96.4199 219.692 96.4556 cv
219.978 96.6338 li
220.03 96.6694 220.048 96.7227 220.013 96.812 cv
219.157 99.4849 li
219.104 99.6455 218.979 99.752 218.765 99.752 cv
218.587 99.752 217.196 99.6987 211.245 99.6987 cv
209.927 99.6987 209.285 99.752 208.964 99.752 cv
208.857 99.752 208.821 99.7163 208.821 99.6094 cv
208.821 99.1821 li
208.821 99.0752 208.857 99.0396 209 99.0396 cv
209.606 99.0396 li
210.425 99.0396 210.497 98.9326 210.497 98.2729 cv
210.497 94.0322 li
210.497 92.2856 li
210.497 90.8242 210.461 88.6147 210.425 88.3652 cv
210.354 87.8843 210.176 87.7417 209.642 87.7417 cv
208.964 87.7417 li
208.894 87.7417 208.857 87.7061 208.857 87.6167 cv
208.857 87.1533 li
208.857 87.0645 208.875 87.0288 208.964 87.0288 cv
209.356 87.0288 209.997 87.1001 211.459 87.082 cv
211.958 87.082 li
212.742 87.082 216.841 87.0464 217.624 87.0464 cv
217.909 87.0464 218.249 87.0288 218.337 87.0288 cv
218.427 87.0288 218.462 87.0645 218.479 87.1357 cv
218.552 87.3672 219.229 89.791 219.3 89.9692 cv
219.335 90.0762 219.317 90.1294 219.246 90.165 cv
218.925 90.3076 li
218.872 90.3257 218.819 90.3076 218.765 90.2188 cv
218.694 90.1118 217.232 88.4722 216.806 88.2227 cv
216.431 88.0088 215.95 87.7773 215.45 87.7593 cv
212.742 87.688 li
212.706 92.8379 li
213.241 92.8379 214.524 92.8022 214.737 92.749 cv
215.13 92.6777 215.344 92.5352 215.558 92.1074 cv
215.665 91.876 215.843 91.4302 215.843 91.1094 cv
215.843 91.0024 215.914 90.9668 215.985 90.9668 cv
216.448 91.0024 li
216.521 91.0024 216.573 91.0381 216.556 91.145 cv
216.521 91.4302 216.521 92.6064 216.521 93.0698 cv
216.521 93.7827 216.591 94.6377 216.627 95.0298 cv
216.627 95.1191 216.591 95.1367 216.484 95.1548 cv
216.093 95.2261 li
216.021 95.2437 215.985 95.208 215.95 95.1011 cv
215.878 94.8159 215.753 94.4238 215.665 94.21 cv
215.504 93.854 215.165 93.6045 214.773 93.5688 cv
214.132 93.4976 213.276 93.4619 212.706 93.4619 cv
212.724 94.5308 li
cp
f
226.233 94.5308 mo
226.251 95.4932 226.287 97.2397 226.287 97.5605 cv
226.287 98.4868 226.608 98.8433 226.999 98.9502 cv
227.284 99.0215 227.712 99.0928 228.39 99.0928 cv
228.71 99.0928 229.53 99.0571 229.887 99.0215 cv
230.208 98.9858 230.884 98.8076 231.348 98.4155 cv
231.669 98.1304 232.667 96.9546 233.005 96.5269 cv
233.076 96.4375 233.13 96.4199 233.201 96.4556 cv
233.486 96.6338 li
233.54 96.6694 233.558 96.7227 233.522 96.812 cv
232.667 99.4849 li
232.612 99.6455 232.488 99.752 232.274 99.752 cv
232.097 99.752 230.706 99.6987 224.755 99.6987 cv
223.436 99.6987 222.794 99.752 222.474 99.752 cv
222.366 99.752 222.331 99.7163 222.331 99.6094 cv
222.331 99.1821 li
222.331 99.0752 222.366 99.0396 222.509 99.0396 cv
223.115 99.0396 li
223.935 99.0396 224.006 98.9326 224.006 98.2729 cv
224.006 94.0322 li
224.006 92.2856 li
224.006 90.8242 223.97 88.6147 223.935 88.3652 cv
223.863 87.8843 223.685 87.7417 223.151 87.7417 cv
222.474 87.7417 li
222.402 87.7417 222.366 87.7061 222.366 87.6167 cv
222.366 87.1533 li
222.366 87.0645 222.384 87.0288 222.474 87.0288 cv
222.866 87.0288 223.507 87.1001 224.968 87.082 cv
225.468 87.082 li
226.251 87.082 230.351 87.0464 231.134 87.0464 cv
231.419 87.0464 231.758 87.0288 231.847 87.0288 cv
231.937 87.0288 231.972 87.0645 231.989 87.1357 cv
232.061 87.3672 232.737 89.791 232.81 89.9692 cv
232.845 90.0762 232.827 90.1294 232.755 90.165 cv
232.435 90.3076 li
232.382 90.3257 232.328 90.3076 232.274 90.2188 cv
232.203 90.1118 230.741 88.4722 230.314 88.2227 cv
229.94 88.0088 229.459 87.7773 228.96 87.7593 cv
226.251 87.688 li
226.216 92.8379 li
226.751 92.8379 228.033 92.8022 228.247 92.749 cv
228.64 92.6777 228.853 92.5352 229.067 92.1074 cv
229.174 91.876 229.353 91.4302 229.353 91.1094 cv
229.353 91.0024 229.423 90.9668 229.495 90.9668 cv
229.958 91.0024 li
230.029 91.0024 230.083 91.0381 230.065 91.145 cv
230.029 91.4302 230.029 92.6064 230.029 93.0698 cv
230.029 93.7827 230.101 94.6377 230.136 95.0298 cv
230.136 95.1191 230.101 95.1367 229.993 95.1548 cv
229.602 95.2261 li
229.53 95.2437 229.495 95.208 229.459 95.1011 cv
229.388 94.8159 229.263 94.4238 229.174 94.21 cv
229.013 93.854 228.675 93.6045 228.282 93.5688 cv
227.642 93.4976 226.786 93.4619 226.216 93.4619 cv
226.233 94.5308 li
cp
f
239.583 93.4263 mo
239.832 93.4619 240.046 93.4976 240.26 93.4976 cv
243.04 93.4976 243.61 91.252 243.61 90.4326 cv
243.61 89.6128 243.271 88.8462 242.825 88.4365 cv
242.185 87.8662 241.364 87.6704 240.474 87.6704 cv
240.188 87.6704 239.975 87.688 239.832 87.7773 cv
239.689 87.8662 239.618 88.0801 239.618 88.2939 cv
239.583 93.4263 li
cp
239.547 95.0298 mo
239.547 96.0991 239.583 98.0947 239.618 98.3623 cv
239.671 98.7188 239.796 99.0396 240.081 99.0396 cv
240.972 99.0396 li
241.079 99.0396 241.114 99.0928 241.114 99.1641 cv
241.114 99.5918 li
241.114 99.7163 241.062 99.752 240.919 99.752 cv
240.687 99.752 240.331 99.6987 238.478 99.6987 cv
236.731 99.6987 236.304 99.752 236.126 99.752 cv
236.019 99.752 235.983 99.6987 235.983 99.5918 cv
235.983 99.1821 li
235.983 99.0928 236.019 99.0396 236.09 99.0396 cv
236.696 99.0396 li
237.087 99.0396 237.372 98.9326 237.372 98.4512 cv
237.408 96.6694 237.408 94.9941 237.408 93.3193 cv
237.408 88.6328 li
237.408 88.0269 237.159 87.7417 236.839 87.7417 cv
236.144 87.7417 li
236.054 87.7417 236.019 87.7061 236.019 87.6348 cv
236.019 87.1533 li
236.019 87.0645 236.054 87.0288 236.144 87.0288 cv
236.269 87.0288 236.839 87.082 238.585 87.082 cv
239.583 87.082 241.222 87.0288 241.757 87.0288 cv
243.183 87.0288 244.286 87.5098 244.999 88.1514 cv
245.642 88.7217 245.962 89.4702 245.962 90.1475 cv
245.962 92.3926 244.607 93.3193 242.647 93.6401 cv
242.647 93.7114 li
243.146 93.8896 243.468 94.21 243.717 94.5308 cv
243.931 94.8159 245.035 96.4912 245.178 96.7051 cv
245.284 96.8833 246.425 98.4868 246.692 98.7363 cv
247.031 99.0396 247.53 99.0752 247.958 99.0752 cv
248.064 99.0752 248.101 99.1284 248.101 99.1997 cv
248.101 99.5742 li
248.101 99.6987 248.064 99.752 247.958 99.752 cv
247.815 99.752 247.353 99.6987 246.212 99.6987 cv
245.712 99.6987 245.035 99.7344 244.644 99.752 cv
244.429 99.5918 244.091 99.1108 243.859 98.7363 cv
243.538 98.2373 242.843 96.9546 242.683 96.6694 cv
242.505 96.3486 242.006 95.5288 241.721 95.1367 cv
241.275 94.5132 240.865 94.0322 240.117 94.0322 cv
240.046 94.0322 239.743 94.0498 239.547 94.0679 cv
239.547 95.0298 li
cp
f
253.808 93.9253 mo
253.808 94.1035 253.843 98.2017 253.843 98.3979 cv
253.843 98.9683 254.128 99.0396 254.556 99.0396 cv
255.304 99.0396 li
255.375 99.0396 255.446 99.0752 255.446 99.1641 cv
255.446 99.6094 li
255.446 99.7163 255.375 99.752 255.269 99.752 cv
255.054 99.752 254.342 99.6987 252.667 99.6987 cv
250.885 99.6987 250.101 99.752 249.923 99.752 cv
249.815 99.752 249.78 99.7163 249.78 99.6274 cv
249.78 99.1465 li
249.78 99.0752 249.815 99.0396 249.923 99.0396 cv
250.636 99.0396 li
250.991 99.0396 251.384 99.0039 251.454 98.5225 cv
251.49 98.2729 251.526 94.4238 251.526 93.4619 cv
251.526 92.2144 li
251.526 91.7866 251.49 88.5791 251.473 88.3477 cv
251.419 87.9199 251.241 87.7417 250.742 87.7417 cv
249.815 87.7417 li
249.708 87.7417 249.673 87.7061 249.673 87.6167 cv
249.673 87.1533 li
249.673 87.0645 249.708 87.0288 249.78 87.0288 cv
249.993 87.0288 250.921 87.082 252.667 87.082 cv
254.378 87.082 254.947 87.0288 255.196 87.0288 cv
255.304 87.0288 255.339 87.1001 255.339 87.189 cv
255.339 87.5991 li
255.339 87.7061 255.269 87.7417 255.196 87.7417 cv
254.521 87.7417 li
254.128 87.7417 253.843 87.8843 253.843 88.2227 cv
253.843 88.4009 253.808 92.3213 253.808 92.5352 cv
253.808 93.9253 li
cp
f
260.703 91.644 mo
260.703 94.6733 260.846 97.1685 260.882 97.7207 cv
260.917 98.6118 261.131 99.0396 261.772 99.0396 cv
262.235 99.0396 li
262.378 99.0396 262.378 99.1108 262.378 99.1997 cv
262.378 99.6094 li
262.378 99.7163 262.378 99.752 262.235 99.752 cv
262.058 99.752 260.988 99.6987 260.312 99.6987 cv
259.848 99.6987 258.636 99.752 258.458 99.752 cv
258.387 99.752 258.351 99.7163 258.351 99.5918 cv
258.351 99.1465 li
258.351 99.1108 258.387 99.0396 258.458 99.0396 cv
259.063 99.0396 li
259.526 99.0396 259.776 98.6475 259.866 97.5605 cv
259.884 97.2397 259.99 94.7446 259.99 91.8936 cv
259.99 89.6304 li
259.99 88.5615 259.385 87.7417 258.601 87.7417 cv
258.03 87.7417 li
257.959 87.7236 257.923 87.688 257.923 87.6167 cv
257.923 87.1357 li
257.923 87.0645 257.959 87.0288 258.03 87.0288 cv
258.119 87.0288 258.262 87.0464 258.583 87.0645 cv
258.903 87.082 259.385 87.082 260.169 87.082 cv
260.472 87.082 260.739 87.0645 260.952 87.0464 cv
261.185 87.0464 261.345 87.0288 261.452 87.0288 cv
261.665 87.0288 261.772 87.082 261.88 87.189 cv
262.058 87.3672 265.55 91.751 265.907 92.25 cv
266.156 92.5352 268.937 95.9922 269.222 96.3486 cv
269.292 96.3486 li
269.292 94.4951 li
269.292 92.9272 269.292 92.0361 269.257 91.145 cv
269.222 90.4678 269.149 88.7217 269.061 88.4189 cv
268.937 87.9912 268.544 87.7417 268.116 87.7417 cv
267.546 87.7417 li
267.438 87.7417 267.438 87.6704 267.438 87.5811 cv
267.438 87.1714 li
267.438 87.0645 267.438 87.0288 267.581 87.0288 cv
267.796 87.0288 268.366 87.082 269.577 87.082 cv
270.646 87.082 271.074 87.0288 271.288 87.0288 cv
271.431 87.0288 271.466 87.1001 271.466 87.1533 cv
271.466 87.5635 li
271.466 87.6704 271.431 87.7417 271.359 87.7417 cv
270.86 87.7417 li
270.504 87.7417 270.326 88.0269 270.272 88.686 cv
270.184 89.8979 270.005 92.8916 270.005 94.709 cv
270.005 99.4136 li
270.005 99.6631 270.005 99.9126 269.792 99.9126 cv
269.542 99.9126 269.328 99.77 269.186 99.6274 cv
269.043 99.4492 268.081 98.3442 266.976 97.0259 cv
265.729 95.4932 264.339 93.8184 264.124 93.5332 cv
263.875 93.2837 261.024 89.7197 260.81 89.4702 cv
260.703 89.4702 li
260.703 91.644 li
cp
f
286.595 97.9346 mo
286.595 98.1841 286.667 98.3623 286.667 98.5049 cv
286.667 98.6475 286.56 98.7188 286.382 98.79 cv
284.921 99.5386 283.459 99.9658 281.321 99.9658 cv
279.574 99.9658 277.4 99.3604 276.188 97.8989 cv
275.084 96.687 274.55 95.1548 274.55 93.0518 cv
274.55 91.4126 275.263 89.7017 276.581 88.5615 cv
277.864 87.4209 279.503 86.8149 281.642 86.8149 cv
283.353 86.8149 284.706 87.3496 285.276 87.7773 cv
285.491 87.9375 285.598 87.8843 285.704 87.7417 cv
285.919 87.4565 li
286.007 87.3315 286.062 87.2783 286.168 87.2783 cv
286.347 87.2783 286.382 87.3853 286.382 87.5278 cv
286.56 91.0918 li
286.56 91.2344 286.56 91.3232 286.488 91.3413 cv
286.062 91.4126 li
285.954 91.4302 285.919 91.377 285.883 91.27 cv
285.634 90.5571 285.17 89.5591 284.457 88.8105 cv
283.851 88.1694 282.853 87.5635 281.499 87.5635 cv
280.394 87.5635 279.432 87.8486 278.47 88.9531 cv
277.614 89.9155 277.009 91.4126 277.009 92.9805 cv
277.009 95.0835 277.579 96.9009 278.612 97.9346 cv
279.468 98.7544 280.323 99.1465 281.464 99.1465 cv
282.604 99.1465 283.28 99.0039 283.887 98.6831 cv
284.278 98.4692 284.314 97.9702 284.314 97.0435 cv
284.314 95.7427 li
284.314 95.1011 284.136 94.9229 283.673 94.9229 cv
282.925 94.9229 li
282.817 94.9229 282.782 94.8516 282.782 94.7627 cv
282.782 94.3525 li
282.782 94.2456 282.817 94.21 282.889 94.21 cv
283.103 94.21 283.958 94.2637 285.419 94.2637 cv
286.916 94.2637 287.522 94.21 287.7 94.21 cv
287.843 94.21 287.878 94.2456 287.878 94.335 cv
287.878 94.7803 li
287.878 94.8872 287.843 94.9229 287.735 94.9229 cv
287.13 94.9229 li
286.81 94.9229 286.595 95.0654 286.595 95.5825 cv
286.595 97.9346 li
cp
f
26.8613 114.085 mo
26.6831 113.569 25.4712 109.506 25.3643 109.149 cv
25.293 108.936 25.2573 108.829 25.186 108.829 cv
25.0791 108.829 25.0078 108.9 24.9546 109.06 cv
24.8833 109.292 23.2793 113.676 23.1548 114.085 cv
26.8613 114.085 li
cp
22.9053 114.798 mo
22.7627 115.208 21.8896 117.756 21.8003 118.237 cv
21.7646 118.38 21.7646 118.522 21.7646 118.612 cv
21.7646 118.843 22.0498 119.04 22.4063 119.04 cv
23.1548 119.04 li
23.2974 119.04 23.333 119.075 23.333 119.128 cv
23.333 119.574 li
23.333 119.681 23.2974 119.752 23.1904 119.752 cv
22.9409 119.752 22.1924 119.699 20.9448 119.699 cv
19.6265 119.699 19.2344 119.752 18.9849 119.752 cv
18.8779 119.752 18.8779 119.646 18.8779 119.521 cv
18.8779 119.182 li
18.8779 119.075 18.9136 119.04 18.9849 119.04 cv
19.5195 119.04 li
20.0186 119.04 20.3394 118.79 20.6602 118.237 cv
20.8384 117.917 22.1211 114.709 22.6558 113.212 cv
22.7808 112.856 24.2241 109.007 24.4023 108.543 cv
24.438 108.365 24.5444 108.044 24.438 107.938 cv
24.3843 107.884 24.3311 107.777 24.3311 107.724 cv
24.3311 107.652 24.3667 107.581 24.5093 107.545 cv
25.0791 107.403 26.0596 106.868 26.2734 106.655 cv
26.3804 106.548 26.4517 106.477 26.5405 106.477 cv
26.6475 106.477 26.7188 106.69 26.7544 106.797 cv
27.0752 107.902 28.4648 111.894 28.7856 113.034 cv
29.2134 114.424 30.354 117.739 30.6035 118.22 cv
30.9243 118.826 31.3877 119.04 31.7441 119.04 cv
32.314 119.04 li
32.4209 119.04 32.4565 119.075 32.4565 119.164 cv
32.4565 119.539 li
32.4565 119.646 32.4209 119.752 32.2783 119.752 cv
31.958 119.752 31.6016 119.699 29.6411 119.699 cv
28.1445 119.699 27.5386 119.752 27.1465 119.752 cv
27.0039 119.752 26.9683 119.646 26.9683 119.539 cv
26.9683 119.182 li
26.9683 119.075 27.0039 119.04 27.1108 119.04 cv
27.5742 119.04 li
28.0732 119.04 28.2153 118.861 28.1089 118.38 cv
27.9663 117.739 27.2534 115.458 27.0396 114.798 cv
22.9053 114.798 li
cp
f
37.0005 111.644 mo
37.0005 114.673 37.1431 117.168 37.1787 117.721 cv
37.2144 118.612 37.4282 119.04 38.0698 119.04 cv
38.5332 119.04 li
38.6758 119.04 38.6758 119.111 38.6758 119.2 cv
38.6758 119.609 li
38.6758 119.716 38.6758 119.752 38.5332 119.752 cv
38.355 119.752 37.2856 119.699 36.6084 119.699 cv
36.145 119.699 34.9336 119.752 34.7554 119.752 cv
34.6841 119.752 34.6484 119.716 34.6484 119.592 cv
34.6484 119.146 li
34.6484 119.111 34.6841 119.04 34.7554 119.04 cv
35.3613 119.04 li
35.8242 119.04 36.0737 118.647 36.1631 117.561 cv
36.1807 117.24 36.2876 114.745 36.2876 111.894 cv
36.2876 109.63 li
36.2876 108.562 35.6821 107.742 34.8979 107.742 cv
34.3276 107.742 li
34.2563 107.724 34.2207 107.688 34.2207 107.617 cv
34.2207 107.136 li
34.2207 107.064 34.2563 107.029 34.3276 107.029 cv
34.4165 107.029 34.5591 107.046 34.8799 107.064 cv
35.2007 107.082 35.6821 107.082 36.4658 107.082 cv
36.769 107.082 37.0361 107.064 37.25 107.046 cv
37.4819 107.046 37.6421 107.029 37.749 107.029 cv
37.9629 107.029 38.0698 107.082 38.1768 107.189 cv
38.355 107.367 41.8477 111.751 42.2041 112.25 cv
42.4536 112.535 45.2334 115.992 45.5186 116.349 cv
45.5898 116.349 li
45.5898 114.495 li
45.5898 112.927 45.5898 112.036 45.5542 111.145 cv
45.5186 110.468 45.4473 108.722 45.3579 108.419 cv
45.2334 107.991 44.8413 107.742 44.4136 107.742 cv
43.8433 107.742 li
43.7363 107.742 43.7363 107.67 43.7363 107.581 cv
43.7363 107.171 li
43.7363 107.064 43.7363 107.029 43.8789 107.029 cv
44.0928 107.029 44.6631 107.082 45.875 107.082 cv
46.9438 107.082 47.3716 107.029 47.5854 107.029 cv
47.728 107.029 47.7637 107.1 47.7637 107.153 cv
47.7637 107.563 li
47.7637 107.67 47.728 107.742 47.6567 107.742 cv
47.1577 107.742 li
46.8013 107.742 46.6235 108.027 46.5698 108.686 cv
46.481 109.898 46.3027 112.892 46.3027 114.709 cv
46.3027 119.414 li
46.3027 119.663 46.3027 119.913 46.0889 119.913 cv
45.8394 119.913 45.6255 119.77 45.4829 119.627 cv
45.3403 119.449 44.3779 118.344 43.2729 117.026 cv
42.0259 115.493 40.6357 113.818 40.4219 113.533 cv
40.1724 113.284 37.3213 109.72 37.1074 109.47 cv
37.0005 109.47 li
37.0005 111.644 li
cp
f
54.5176 113.248 mo
54.5176 113.462 54.5532 116.491 54.5532 117.596 cv
54.5532 117.952 54.6245 118.237 54.874 118.594 cv
55.0879 118.933 55.7646 119.075 56.4419 119.075 cv
57.832 119.075 59.2573 118.451 60.1484 117.275 cv
60.897 116.313 61.4316 114.852 61.4316 113.212 cv
61.4316 111.787 60.8257 110.254 60.0059 109.328 cv
59.0435 108.294 57.4756 107.652 56.0142 107.652 cv
55.6221 107.652 55.1592 107.652 54.874 107.831 cv
54.6245 107.973 54.5532 108.258 54.5532 108.615 cv
54.5176 109.363 54.5176 111.68 54.5176 111.965 cv
54.5176 113.248 li
cp
52.272 111.501 mo
52.272 111.038 52.2007 108.508 52.165 108.241 cv
52.1294 107.813 51.8799 107.742 51.5239 107.742 cv
50.5615 107.742 li
50.4902 107.742 50.4189 107.706 50.4189 107.617 cv
50.4189 107.136 li
50.4189 107.064 50.4902 107.029 50.5791 107.029 cv
51.0962 107.029 52.0225 107.082 53.27 107.082 cv
54.1611 107.082 55.0522 107.029 55.9429 107.029 cv
58.3311 107.029 60.2554 107.26 61.895 108.65 cv
63.0708 109.613 63.8906 111.109 63.8906 113.177 cv
63.8906 115.208 63.3203 116.563 62.1445 117.846 cv
60.3979 119.734 57.6182 119.752 56.4063 119.752 cv
55.729 119.752 53.9116 119.699 53.0205 119.699 cv
51.4526 119.699 50.7397 119.752 50.4902 119.752 cv
50.4189 119.752 50.3833 119.716 50.3833 119.592 cv
50.3833 119.146 li
50.3833 119.075 50.4189 119.04 50.5259 119.04 cv
51.5596 119.04 li
51.9155 119.04 52.0938 118.897 52.1475 118.594 cv
52.2007 118.237 52.272 114.21 52.272 112.856 cv
52.272 111.501 li
cp
f
82.4058 112.769 mo
82.1855 112.131 80.6899 107.115 80.5576 106.675 cv
80.4697 106.411 80.4258 106.279 80.3379 106.279 cv
80.2056 106.279 80.1177 106.367 80.0518 106.565 cv
79.9639 106.851 77.9839 112.263 77.8296 112.769 cv
82.4058 112.769 li
cp
77.522 113.649 mo
77.3457 114.155 76.2681 117.301 76.1577 117.895 cv
76.1138 118.071 76.1138 118.247 76.1138 118.357 cv
76.1138 118.643 76.4658 118.885 76.9058 118.885 cv
77.8296 118.885 li
78.0059 118.885 78.0498 118.929 78.0498 118.995 cv
78.0498 119.545 li
78.0498 119.677 78.0059 119.765 77.874 119.765 cv
77.5659 119.765 76.6416 119.699 75.1021 119.699 cv
73.4736 119.699 72.9897 119.765 72.6816 119.765 cv
72.5498 119.765 72.5498 119.633 72.5498 119.479 cv
72.5498 119.061 li
72.5498 118.929 72.5938 118.885 72.6816 118.885 cv
73.3418 118.885 li
73.958 118.885 74.354 118.577 74.75 117.895 cv
74.9697 117.499 76.5537 113.539 77.2139 111.691 cv
77.3677 111.251 79.1499 106.499 79.3696 105.927 cv
79.4136 105.707 79.5459 105.311 79.4136 105.179 cv
79.3477 105.113 79.2817 104.981 79.2817 104.915 cv
79.2817 104.827 79.3257 104.739 79.502 104.695 cv
80.2056 104.519 81.416 103.859 81.6797 103.595 cv
81.812 103.463 81.8999 103.375 82.0098 103.375 cv
82.1416 103.375 82.23 103.639 82.2739 103.771 cv
82.6699 105.135 84.3857 110.063 84.7817 111.471 cv
85.3096 113.187 86.7178 117.279 87.0259 117.873 cv
87.4219 118.621 87.9937 118.885 88.4336 118.885 cv
89.1377 118.885 li
89.2695 118.885 89.314 118.929 89.314 119.039 cv
89.314 119.5 li
89.314 119.633 89.2695 119.765 89.0938 119.765 cv
88.6978 119.765 88.2578 119.699 85.8379 119.699 cv
83.9897 119.699 83.2417 119.765 82.7578 119.765 cv
82.5815 119.765 82.5376 119.633 82.5376 119.5 cv
82.5376 119.061 li
82.5376 118.929 82.5815 118.885 82.7139 118.885 cv
83.2856 118.885 li
83.9019 118.885 84.0776 118.665 83.9458 118.071 cv
83.7695 117.279 82.8896 114.463 82.626 113.649 cv
77.522 113.649 li
cp
f
95.6743 113.533 mo
95.9951 113.64 96.4941 113.676 96.957 113.676 cv
97.7412 113.676 98.668 113.07 99.0957 112.464 cv
99.4521 111.929 99.5234 111.252 99.5234 110.61 cv
99.5234 108.187 97.563 107.635 96.7075 107.635 cv
96.3872 107.635 95.9595 107.617 95.6743 107.759 cv
95.6743 113.533 li
cp
93.4287 111.395 mo
93.4287 110.219 93.4287 108.33 93.4111 108.134 cv
93.3755 107.831 93.1792 107.742 92.7876 107.742 cv
91.8608 107.742 li
91.7896 107.742 91.7539 107.706 91.7539 107.617 cv
91.7539 107.171 li
91.7539 107.064 91.7896 107.029 91.8608 107.029 cv
92.0747 107.029 92.7163 107.082 94.498 107.082 cv
94.8188 107.082 95.8525 107.029 96.4585 107.029 cv
98.5967 107.029 99.6304 107.225 100.664 107.938 cv
101.483 108.543 102.018 109.542 102.018 110.646 cv
102.018 112.856 100.307 114.246 97.2778 114.246 cv
96.6719 114.246 96.1377 114.246 95.6743 114.175 cv
95.6743 114.958 li
95.6743 115.814 95.6743 118.237 95.6919 118.469 cv
95.7456 118.861 95.9238 119.04 96.2446 119.04 cv
97.2422 119.04 li
97.3848 119.04 97.3848 119.111 97.3848 119.164 cv
97.3848 119.574 li
97.3848 119.681 97.3848 119.752 97.2422 119.752 cv
96.9927 119.752 96.4229 119.699 94.498 119.699 cv
92.9302 119.699 92.2173 119.752 92.0391 119.752 cv
91.8965 119.752 91.8965 119.681 91.8965 119.627 cv
91.8965 119.182 li
91.8965 119.075 91.8965 119.04 92.0034 119.04 cv
92.5737 119.04 li
93.1792 119.04 93.3218 118.968 93.3755 118.487 cv
93.3931 118.309 93.4287 115.529 93.4287 113.462 cv
93.4287 111.395 li
cp
f
108.184 113.533 mo
108.504 113.64 109.003 113.676 109.466 113.676 cv
110.25 113.676 111.177 113.07 111.605 112.464 cv
111.961 111.929 112.033 111.252 112.033 110.61 cv
112.033 108.187 110.072 107.635 109.217 107.635 cv
108.896 107.635 108.469 107.617 108.184 107.759 cv
108.184 113.533 li
cp
105.938 111.395 mo
105.938 110.219 105.938 108.33 105.92 108.134 cv
105.885 107.831 105.688 107.742 105.297 107.742 cv
104.37 107.742 li
104.299 107.742 104.263 107.706 104.263 107.617 cv
104.263 107.171 li
104.263 107.064 104.299 107.029 104.37 107.029 cv
104.584 107.029 105.226 107.082 107.007 107.082 cv
107.328 107.082 108.362 107.029 108.968 107.029 cv
111.106 107.029 112.14 107.225 113.173 107.938 cv
113.993 108.543 114.527 109.542 114.527 110.646 cv
114.527 112.856 112.817 114.246 109.787 114.246 cv
109.181 114.246 108.647 114.246 108.184 114.175 cv
108.184 114.958 li
108.184 115.814 108.184 118.237 108.201 118.469 cv
108.255 118.861 108.433 119.04 108.754 119.04 cv
109.751 119.04 li
109.894 119.04 109.894 119.111 109.894 119.164 cv
109.894 119.574 li
109.894 119.681 109.894 119.752 109.751 119.752 cv
109.502 119.752 108.932 119.699 107.007 119.699 cv
105.439 119.699 104.727 119.752 104.548 119.752 cv
104.406 119.752 104.406 119.681 104.406 119.627 cv
104.406 119.182 li
104.406 119.075 104.406 119.04 104.513 119.04 cv
105.083 119.04 li
105.688 119.04 105.831 118.968 105.885 118.487 cv
105.902 118.309 105.938 115.529 105.938 113.462 cv
105.938 111.395 li
cp
f
127.75 116.028 mo
127.786 116.063 127.786 116.099 127.786 116.206 cv
127.714 116.313 127.001 119.271 126.895 119.752 cv
126.431 119.734 121.299 119.699 119.481 119.699 cv
117.878 119.699 117.236 119.752 117.022 119.752 cv
116.88 119.752 116.88 119.716 116.88 119.592 cv
116.88 119.182 li
116.88 119.075 116.88 119.04 116.987 119.04 cv
117.7 119.04 li
118.341 119.04 118.448 118.79 118.448 118.558 cv
118.448 118.237 118.519 113.783 118.519 112.713 cv
118.519 111.715 li
118.519 110.575 118.483 108.686 118.448 108.383 cv
118.412 107.92 118.341 107.742 117.878 107.742 cv
117.129 107.742 li
117.022 107.742 116.987 107.635 116.987 107.581 cv
116.987 107.171 li
116.987 107.064 117.022 107.029 117.129 107.029 cv
117.308 107.029 117.949 107.082 119.588 107.082 cv
121.513 107.082 122.261 107.029 122.404 107.029 cv
122.546 107.029 122.582 107.1 122.582 107.189 cv
122.582 107.599 li
122.582 107.67 122.546 107.742 122.404 107.742 cv
121.442 107.742 li
120.907 107.742 120.836 107.92 120.836 108.401 cv
120.836 108.65 120.765 111.323 120.765 112.571 cv
120.765 114.104 li
120.765 114.424 120.765 118.273 120.836 119.04 cv
121.833 119.04 li
122.832 119.04 124.115 119.04 124.828 118.95 cv
125.825 118.808 126.966 116.669 127.215 115.992 cv
127.287 115.921 127.322 115.885 127.429 115.921 cv
127.75 116.028 li
cp
f
133.759 113.925 mo
133.759 114.104 133.795 118.202 133.795 118.398 cv
133.795 118.968 134.08 119.04 134.508 119.04 cv
135.256 119.04 li
135.327 119.04 135.398 119.075 135.398 119.164 cv
135.398 119.609 li
135.398 119.716 135.327 119.752 135.22 119.752 cv
135.006 119.752 134.294 119.699 132.619 119.699 cv
130.837 119.699 130.053 119.752 129.875 119.752 cv
129.768 119.752 129.732 119.716 129.732 119.627 cv
129.732 119.146 li
129.732 119.075 129.768 119.04 129.875 119.04 cv
130.587 119.04 li
130.944 119.04 131.335 119.004 131.407 118.522 cv
131.442 118.273 131.478 114.424 131.478 113.462 cv
131.478 112.214 li
131.478 111.787 131.442 108.579 131.425 108.348 cv
131.371 107.92 131.193 107.742 130.694 107.742 cv
129.768 107.742 li
129.661 107.742 129.625 107.706 129.625 107.617 cv
129.625 107.153 li
129.625 107.064 129.661 107.029 129.732 107.029 cv
129.946 107.029 130.873 107.082 132.619 107.082 cv
134.33 107.082 134.899 107.029 135.149 107.029 cv
135.256 107.029 135.292 107.1 135.292 107.189 cv
135.292 107.599 li
135.292 107.706 135.22 107.742 135.149 107.742 cv
134.472 107.742 li
134.08 107.742 133.795 107.884 133.795 108.223 cv
133.795 108.401 133.759 112.321 133.759 112.535 cv
133.759 113.925 li
cp
f
142.276 114.531 mo
142.294 115.493 142.33 117.24 142.33 117.561 cv
142.33 118.487 142.651 118.843 143.042 118.95 cv
143.327 119.021 143.755 119.093 144.433 119.093 cv
144.753 119.093 145.573 119.057 145.93 119.021 cv
146.251 118.986 146.927 118.808 147.391 118.416 cv
147.712 118.13 148.71 116.955 149.048 116.527 cv
149.119 116.438 149.173 116.42 149.244 116.456 cv
149.529 116.634 li
149.583 116.669 149.601 116.723 149.565 116.812 cv
148.71 119.485 li
148.655 119.646 148.531 119.752 148.317 119.752 cv
148.14 119.752 146.749 119.699 140.798 119.699 cv
139.479 119.699 138.837 119.752 138.517 119.752 cv
138.41 119.752 138.374 119.716 138.374 119.609 cv
138.374 119.182 li
138.374 119.075 138.41 119.04 138.552 119.04 cv
139.158 119.04 li
139.978 119.04 140.049 118.933 140.049 118.273 cv
140.049 114.032 li
140.049 112.286 li
140.049 110.824 140.013 108.615 139.978 108.365 cv
139.906 107.884 139.728 107.742 139.194 107.742 cv
138.517 107.742 li
138.445 107.742 138.41 107.706 138.41 107.617 cv
138.41 107.153 li
138.41 107.064 138.427 107.029 138.517 107.029 cv
138.909 107.029 139.55 107.1 141.011 107.082 cv
141.511 107.082 li
142.294 107.082 146.394 107.046 147.177 107.046 cv
147.462 107.046 147.801 107.029 147.89 107.029 cv
147.979 107.029 148.015 107.064 148.032 107.136 cv
148.104 107.367 148.78 109.791 148.853 109.969 cv
148.888 110.076 148.87 110.129 148.798 110.165 cv
148.478 110.308 li
148.425 110.326 148.371 110.308 148.317 110.219 cv
148.246 110.112 146.784 108.472 146.357 108.223 cv
145.983 108.009 145.502 107.777 145.003 107.759 cv
142.294 107.688 li
142.259 112.838 li
142.794 112.838 144.076 112.802 144.29 112.749 cv
144.683 112.678 144.896 112.535 145.11 112.107 cv
145.217 111.876 145.396 111.43 145.396 111.109 cv
145.396 111.002 145.466 110.967 145.538 110.967 cv
146.001 111.002 li
146.072 111.002 146.126 111.038 146.108 111.145 cv
146.072 111.43 146.072 112.606 146.072 113.07 cv
146.072 113.783 146.144 114.638 146.179 115.03 cv
146.179 115.119 146.144 115.137 146.036 115.155 cv
145.645 115.226 li
145.573 115.244 145.538 115.208 145.502 115.101 cv
145.431 114.816 145.306 114.424 145.217 114.21 cv
145.056 113.854 144.718 113.604 144.325 113.569 cv
143.685 113.498 142.829 113.462 142.259 113.462 cv
142.276 114.531 li
cp
f
155.732 113.248 mo
155.732 113.462 155.769 116.491 155.769 117.596 cv
155.769 117.952 155.839 118.237 156.089 118.594 cv
156.303 118.933 156.979 119.075 157.657 119.075 cv
159.047 119.075 160.472 118.451 161.363 117.275 cv
162.112 116.313 162.646 114.852 162.646 113.212 cv
162.646 111.787 162.04 110.254 161.221 109.328 cv
160.259 108.294 158.69 107.652 157.229 107.652 cv
156.837 107.652 156.374 107.652 156.089 107.831 cv
155.839 107.973 155.769 108.258 155.769 108.615 cv
155.732 109.363 155.732 111.68 155.732 111.965 cv
155.732 113.248 li
cp
153.487 111.501 mo
153.487 111.038 153.415 108.508 153.38 108.241 cv
153.345 107.813 153.095 107.742 152.739 107.742 cv
151.776 107.742 li
151.705 107.742 151.634 107.706 151.634 107.617 cv
151.634 107.136 li
151.634 107.064 151.705 107.029 151.794 107.029 cv
152.312 107.029 153.237 107.082 154.485 107.082 cv
155.376 107.082 156.267 107.029 157.157 107.029 cv
159.546 107.029 161.47 107.26 163.11 108.65 cv
164.286 109.613 165.105 111.109 165.105 113.177 cv
165.105 115.208 164.535 116.563 163.359 117.846 cv
161.612 119.734 158.833 119.752 157.621 119.752 cv
156.944 119.752 155.126 119.699 154.235 119.699 cv
152.667 119.699 151.954 119.752 151.705 119.752 cv
151.634 119.752 151.599 119.716 151.599 119.592 cv
151.599 119.146 li
151.599 119.075 151.634 119.04 151.741 119.04 cv
152.774 119.04 li
153.13 119.04 153.309 118.897 153.362 118.594 cv
153.415 118.237 153.487 114.21 153.487 112.856 cv
153.487 111.501 li
cp
f
176.317 114.793 mo
176.405 114.793 176.448 114.837 176.448 114.969 cv
176.493 115.673 176.669 116.509 177.284 117.477 cv
177.944 118.533 179.089 119.061 180.188 119.061 cv
181.376 119.061 183.049 118.313 183.049 116.487 cv
183.049 114.463 182.124 113.803 179.792 112.923 cv
179.089 112.659 177.637 112.043 176.581 111.075 cv
175.833 110.371 175.48 109.271 175.48 107.929 cv
175.48 106.697 175.965 105.685 177.021 104.849 cv
177.901 104.101 178.868 103.793 180.145 103.793 cv
181.597 103.793 182.477 104.145 182.917 104.321 cv
183.137 104.409 183.269 104.365 183.378 104.255 cv
183.665 103.969 li
183.753 103.881 183.841 103.837 183.973 103.837 cv
184.104 103.837 184.148 103.969 184.148 104.189 cv
184.148 104.541 184.501 107.621 184.501 107.841 cv
184.501 107.929 184.456 107.973 184.368 107.995 cv
184.017 108.105 li
183.929 108.127 183.841 108.105 183.796 107.973 cv
183.577 107.357 183.225 106.477 182.433 105.641 cv
181.86 105.025 181.157 104.717 180.145 104.717 cv
178.385 104.717 177.681 106.125 177.681 106.939 cv
177.681 107.687 177.769 108.347 178.297 108.919 cv
178.868 109.491 180.101 110.019 180.98 110.283 cv
182.257 110.679 183.313 111.119 184.148 111.999 cv
184.853 112.747 185.249 113.671 185.249 115.145 cv
185.249 117.829 183.489 120.029 180.585 120.029 cv
178.78 120.029 177.725 119.633 176.845 118.973 cv
176.581 118.797 176.448 118.708 176.317 118.708 cv
176.185 118.708 176.097 118.885 175.965 119.104 cv
175.833 119.325 175.745 119.369 175.569 119.369 cv
175.393 119.369 175.305 119.237 175.305 119.017 cv
175.349 118.753 175.657 115.189 175.7 114.925 cv
175.723 114.793 175.745 114.749 175.833 114.749 cv
176.317 114.793 li
cp
f
200.969 116.794 mo
201.022 116.848 201.04 116.901 201.005 116.972 cv
199.936 118.505 198.225 119.966 195.694 119.966 cv
193.413 119.966 192.13 119.289 191.025 118.291 cv
189.707 117.115 189.101 115.048 189.101 113.479 cv
189.101 111.733 189.671 110.058 190.919 108.704 cv
191.881 107.67 193.413 106.815 195.552 106.815 cv
197.19 106.815 198.51 107.314 199.151 107.67 cv
199.401 107.813 199.472 107.813 199.508 107.67 cv
199.65 107.207 li
199.687 107.1 199.722 107.1 199.936 107.1 cv
200.149 107.1 200.185 107.136 200.185 107.385 cv
200.185 107.706 200.542 110.557 200.612 111.092 cv
200.63 111.199 200.612 111.252 200.542 111.27 cv
200.202 111.377 li
200.114 111.413 200.06 111.341 200.007 111.199 cv
199.793 110.557 199.365 109.666 198.616 108.882 cv
197.833 108.134 196.906 107.563 195.517 107.563 cv
192.665 107.563 191.489 110.129 191.489 112.695 cv
191.489 113.8 191.81 115.903 193.128 117.329 cv
194.304 118.576 195.338 118.719 196.193 118.719 cv
198.153 118.719 199.704 117.739 200.452 116.651 cv
200.542 116.527 200.612 116.473 200.666 116.527 cv
200.969 116.794 li
cp
f
207.687 113.925 mo
207.687 114.104 207.723 118.202 207.723 118.398 cv
207.723 118.968 208.008 119.04 208.436 119.04 cv
209.184 119.04 li
209.255 119.04 209.326 119.075 209.326 119.164 cv
209.326 119.609 li
209.326 119.716 209.255 119.752 209.147 119.752 cv
208.935 119.752 208.222 119.699 206.546 119.699 cv
204.765 119.699 203.98 119.752 203.802 119.752 cv
203.695 119.752 203.659 119.716 203.659 119.627 cv
203.659 119.146 li
203.659 119.075 203.695 119.04 203.802 119.04 cv
204.515 119.04 li
204.872 119.04 205.263 119.004 205.335 118.522 cv
205.37 118.273 205.405 114.424 205.405 113.462 cv
205.405 112.214 li
205.405 111.787 205.37 108.579 205.353 108.348 cv
205.299 107.92 205.12 107.742 204.622 107.742 cv
203.695 107.742 li
203.589 107.742 203.553 107.706 203.553 107.617 cv
203.553 107.153 li
203.553 107.064 203.589 107.029 203.659 107.029 cv
203.874 107.029 204.8 107.082 206.546 107.082 cv
208.257 107.082 208.827 107.029 209.077 107.029 cv
209.184 107.029 209.22 107.1 209.22 107.189 cv
209.22 107.599 li
209.22 107.706 209.147 107.742 209.077 107.742 cv
208.399 107.742 li
208.008 107.742 207.723 107.884 207.723 108.223 cv
207.723 108.401 207.687 112.321 207.687 112.535 cv
207.687 113.925 li
cp
f
216.204 114.531 mo
216.223 115.493 216.259 117.24 216.259 117.561 cv
216.259 118.487 216.579 118.843 216.972 118.95 cv
217.256 119.021 217.684 119.093 218.36 119.093 cv
218.682 119.093 219.501 119.057 219.858 119.021 cv
220.179 118.986 220.855 118.808 221.319 118.416 cv
221.64 118.13 222.638 116.955 222.976 116.527 cv
223.048 116.438 223.101 116.42 223.173 116.456 cv
223.458 116.634 li
223.511 116.669 223.528 116.723 223.493 116.812 cv
222.638 119.485 li
222.584 119.646 222.46 119.752 222.245 119.752 cv
222.067 119.752 220.677 119.699 214.726 119.699 cv
213.407 119.699 212.766 119.752 212.444 119.752 cv
212.338 119.752 212.302 119.716 212.302 119.609 cv
212.302 119.182 li
212.302 119.075 212.338 119.04 212.48 119.04 cv
213.087 119.04 li
213.905 119.04 213.978 118.933 213.978 118.273 cv
213.978 114.032 li
213.978 112.286 li
213.978 110.824 213.941 108.615 213.905 108.365 cv
213.835 107.884 213.656 107.742 213.122 107.742 cv
212.444 107.742 li
212.374 107.742 212.338 107.706 212.338 107.617 cv
212.338 107.153 li
212.338 107.064 212.355 107.029 212.444 107.029 cv
212.837 107.029 213.478 107.1 214.939 107.082 cv
215.438 107.082 li
216.223 107.082 220.321 107.046 221.104 107.046 cv
221.39 107.046 221.729 107.029 221.817 107.029 cv
221.907 107.029 221.942 107.064 221.96 107.136 cv
222.032 107.367 222.709 109.791 222.78 109.969 cv
222.815 110.076 222.798 110.129 222.727 110.165 cv
222.405 110.308 li
222.353 110.326 222.3 110.308 222.245 110.219 cv
222.175 110.112 220.713 108.472 220.286 108.223 cv
219.911 108.009 219.431 107.777 218.931 107.759 cv
216.223 107.688 li
216.187 112.838 li
216.722 112.838 218.005 112.802 218.218 112.749 cv
218.61 112.678 218.824 112.535 219.038 112.107 cv
219.146 111.876 219.323 111.43 219.323 111.109 cv
219.323 111.002 219.395 110.967 219.466 110.967 cv
219.929 111.002 li
220.001 111.002 220.054 111.038 220.036 111.145 cv
220.001 111.43 220.001 112.606 220.001 113.07 cv
220.001 113.783 220.071 114.638 220.107 115.03 cv
220.107 115.119 220.071 115.137 219.965 115.155 cv
219.573 115.226 li
219.501 115.244 219.466 115.208 219.431 115.101 cv
219.358 114.816 219.233 114.424 219.146 114.21 cv
218.984 113.854 218.646 113.604 218.254 113.569 cv
217.612 113.498 216.757 113.462 216.187 113.462 cv
216.204 114.531 li
cp
f
228.093 111.644 mo
228.093 114.673 228.235 117.168 228.271 117.721 cv
228.306 118.612 228.521 119.04 229.161 119.04 cv
229.625 119.04 li
229.768 119.04 229.768 119.111 229.768 119.2 cv
229.768 119.609 li
229.768 119.716 229.768 119.752 229.625 119.752 cv
229.446 119.752 228.378 119.699 227.7 119.699 cv
227.237 119.699 226.025 119.752 225.847 119.752 cv
225.776 119.752 225.74 119.716 225.74 119.592 cv
225.74 119.146 li
225.74 119.111 225.776 119.04 225.847 119.04 cv
226.453 119.04 li
226.916 119.04 227.165 118.647 227.255 117.561 cv
227.272 117.24 227.38 114.745 227.38 111.894 cv
227.38 109.63 li
227.38 108.562 226.774 107.742 225.989 107.742 cv
225.419 107.742 li
225.349 107.724 225.313 107.688 225.313 107.617 cv
225.313 107.136 li
225.313 107.064 225.349 107.029 225.419 107.029 cv
225.509 107.029 225.651 107.046 225.972 107.064 cv
226.292 107.082 226.774 107.082 227.558 107.082 cv
227.86 107.082 228.128 107.064 228.342 107.046 cv
228.573 107.046 228.733 107.029 228.841 107.029 cv
229.055 107.029 229.161 107.082 229.269 107.189 cv
229.446 107.367 232.939 111.751 233.296 112.25 cv
233.546 112.535 236.325 115.992 236.61 116.349 cv
236.682 116.349 li
236.682 114.495 li
236.682 112.927 236.682 112.036 236.646 111.145 cv
236.61 110.468 236.539 108.722 236.45 108.419 cv
236.325 107.991 235.933 107.742 235.505 107.742 cv
234.935 107.742 li
234.828 107.742 234.828 107.67 234.828 107.581 cv
234.828 107.171 li
234.828 107.064 234.828 107.029 234.971 107.029 cv
235.185 107.029 235.755 107.082 236.967 107.082 cv
238.036 107.082 238.464 107.029 238.677 107.029 cv
238.819 107.029 238.855 107.1 238.855 107.153 cv
238.855 107.563 li
238.855 107.67 238.819 107.742 238.749 107.742 cv
238.249 107.742 li
237.894 107.742 237.716 108.027 237.661 108.686 cv
237.573 109.898 237.395 112.892 237.395 114.709 cv
237.395 119.414 li
237.395 119.663 237.395 119.913 237.181 119.913 cv
236.931 119.913 236.718 119.77 236.575 119.627 cv
236.433 119.449 235.47 118.344 234.364 117.026 cv
233.118 115.493 231.728 113.818 231.514 113.533 cv
231.265 113.284 228.413 109.72 228.199 109.47 cv
228.093 109.47 li
228.093 111.644 li
cp
f
253.807 116.794 mo
253.86 116.848 253.878 116.901 253.843 116.972 cv
252.773 118.505 251.063 119.966 248.532 119.966 cv
246.251 119.966 244.968 119.289 243.863 118.291 cv
242.545 117.115 241.938 115.048 241.938 113.479 cv
241.938 111.733 242.509 110.058 243.757 108.704 cv
244.719 107.67 246.251 106.815 248.39 106.815 cv
250.028 106.815 251.348 107.314 251.989 107.67 cv
252.239 107.813 252.31 107.813 252.346 107.67 cv
252.488 107.207 li
252.524 107.1 252.56 107.1 252.773 107.1 cv
252.987 107.1 253.022 107.136 253.022 107.385 cv
253.022 107.706 253.38 110.557 253.45 111.092 cv
253.468 111.199 253.45 111.252 253.38 111.27 cv
253.04 111.377 li
252.952 111.413 252.897 111.341 252.845 111.199 cv
252.631 110.557 252.203 109.666 251.454 108.882 cv
250.671 108.134 249.744 107.563 248.354 107.563 cv
245.503 107.563 244.327 110.129 244.327 112.695 cv
244.327 113.8 244.647 115.903 245.966 117.329 cv
247.142 118.576 248.176 118.719 249.031 118.719 cv
250.991 118.719 252.542 117.739 253.29 116.651 cv
253.38 116.527 253.45 116.473 253.504 116.527 cv
253.807 116.794 li
cp
f
260.578 114.531 mo
260.597 115.493 260.632 117.24 260.632 117.561 cv
260.632 118.487 260.952 118.843 261.345 118.95 cv
261.63 119.021 262.058 119.093 262.734 119.093 cv
263.056 119.093 263.875 119.057 264.231 119.021 cv
264.552 118.986 265.229 118.808 265.692 118.416 cv
266.013 118.13 267.011 116.955 267.35 116.527 cv
267.421 116.438 267.475 116.42 267.546 116.456 cv
267.831 116.634 li
267.884 116.669 267.902 116.723 267.866 116.812 cv
267.011 119.485 li
266.958 119.646 266.833 119.752 266.619 119.752 cv
266.44 119.752 265.052 119.699 259.099 119.699 cv
257.78 119.699 257.14 119.752 256.818 119.752 cv
256.712 119.752 256.676 119.716 256.676 119.609 cv
256.676 119.182 li
256.676 119.075 256.712 119.04 256.854 119.04 cv
257.46 119.04 li
258.279 119.04 258.351 118.933 258.351 118.273 cv
258.351 114.032 li
258.351 112.286 li
258.351 110.824 258.315 108.615 258.279 108.365 cv
258.208 107.884 258.03 107.742 257.495 107.742 cv
256.818 107.742 li
256.747 107.742 256.712 107.706 256.712 107.617 cv
256.712 107.153 li
256.712 107.064 256.729 107.029 256.818 107.029 cv
257.21 107.029 257.852 107.1 259.313 107.082 cv
259.812 107.082 li
260.597 107.082 264.694 107.046 265.479 107.046 cv
265.764 107.046 266.103 107.029 266.191 107.029 cv
266.28 107.029 266.316 107.064 266.334 107.136 cv
266.405 107.367 267.083 109.791 267.153 109.969 cv
267.189 110.076 267.171 110.129 267.101 110.165 cv
266.78 110.308 li
266.726 110.326 266.673 110.308 266.619 110.219 cv
266.548 110.112 265.087 108.472 264.659 108.223 cv
264.284 108.009 263.804 107.777 263.305 107.759 cv
260.597 107.688 li
260.561 112.838 li
261.095 112.838 262.378 112.802 262.592 112.749 cv
262.983 112.678 263.198 112.535 263.411 112.107 cv
263.519 111.876 263.696 111.43 263.696 111.109 cv
263.696 111.002 263.769 110.967 263.839 110.967 cv
264.303 111.002 li
264.374 111.002 264.427 111.038 264.409 111.145 cv
264.374 111.43 264.374 112.606 264.374 113.07 cv
264.374 113.783 264.445 114.638 264.481 115.03 cv
264.481 115.119 264.445 115.137 264.339 115.155 cv
263.946 115.226 li
263.875 115.244 263.839 115.208 263.804 115.101 cv
263.732 114.816 263.607 114.424 263.519 114.21 cv
263.358 113.854 263.02 113.604 262.628 113.569 cv
261.985 113.498 261.131 113.462 260.561 113.462 cv
260.578 114.531 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%seas-logo.eps
%
%</seas-logo.eps>
%\fi
\endinput
